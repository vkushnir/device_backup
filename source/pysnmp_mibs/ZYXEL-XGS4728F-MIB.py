#
# PySNMP MIB module ZYXEL-XGS4728F-MIB (http://pysnmp.sf.net)
# ASN.1 source file:///usr/local/share/snmp/ZYXEL-XGS-4728F.my
# Produced by pysmi-0.0.7 at Fri Feb 17 12:27:14 2017
# On host e0f449e7a145 platform Linux version 4.4.0-62-generic by user root
# Using Python version 3.5.3 (default, Feb 10 2017, 02:09:54) 
#
( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion")
( Timeout, dot1dBasePort, BridgeId, ) = mibBuilder.importSymbols("BRIDGE-MIB", "Timeout", "dot1dBasePort", "BridgeId")
( OperationResponseStatus, ) = mibBuilder.importSymbols("DISMAN-PING-MIB", "OperationResponseStatus")
( dot1agCfmMdIndex, dot1agCfmMepIdentifier, dot1agCfmMaIndex, ) = mibBuilder.importSymbols("IEEE8021-CFM-MIB", "dot1agCfmMdIndex", "dot1agCfmMepIdentifier", "dot1agCfmMaIndex")
( ifIndex, InterfaceIndexOrZero, ) = mibBuilder.importSymbols("IF-MIB", "ifIndex", "InterfaceIndexOrZero")
( InetAddressType, InetAddress, ) = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
( ospfVirtIfAreaId, ospfAreaId, ospfLsdbAreaId, ospfVirtIfNeighbor, ospfNbrAddressLessIndex, ospfLsdbType, ospfNbrIpAddr, ospfLsdbRouterId, ospfAddressLessIf, ospfIfIpAddress, ospfLsdbLsid, ) = mibBuilder.importSymbols("OSPF-MIB", "ospfVirtIfAreaId", "ospfAreaId", "ospfLsdbAreaId", "ospfVirtIfNeighbor", "ospfNbrAddressLessIndex", "ospfLsdbType", "ospfNbrIpAddr", "ospfLsdbRouterId", "ospfAddressLessIf", "ospfIfIpAddress", "ospfLsdbLsid")
( EnabledStatus, ) = mibBuilder.importSymbols("P-BRIDGE-MIB", "EnabledStatus")
( PortList, ) = mibBuilder.importSymbols("Q-BRIDGE-MIB", "PortList")
( SnmpAdminString, ) = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
( NotificationGroup, ModuleCompliance, ) = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
( sysObjectID, ) = mibBuilder.importSymbols("SNMPv2-MIB", "sysObjectID")
( Gauge32, IpAddress, Counter64, Counter32, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, MibIdentifier, iso, NotificationType, Bits, ObjectIdentity, TimeTicks, enterprises, Integer32, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "IpAddress", "Counter64", "Counter32", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "MibIdentifier", "iso", "NotificationType", "Bits", "ObjectIdentity", "TimeTicks", "enterprises", "Integer32")
( TruthValue, TextualConvention, RowStatus, StorageType, MacAddress, DisplayString, DateAndTime, ) = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "RowStatus", "StorageType", "MacAddress", "DisplayString", "DateAndTime")
zyxel = MibIdentifier((1, 3, 6, 1, 4, 1, 890))
products = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1))
accessSwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 5))
esSeries = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 5, 8))
xgs4728f = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46))
ZYXEL_xgs4728f_MIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46))
sysInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 1))
rateLimitSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 2))
brLimitSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 3))
portSecuritySetup = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 4))
vlanTrunkSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 5))
ctlProtTransSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 6))
vlanStackSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 7))
dot1xSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 8))
hwMonitorInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 9))
snmpSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 10))
dateTimeSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 11))
sysMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 12))
layer2Setup = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 13))
ipSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 14))
filterSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 15))
mirrorSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 16))
aggrSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 17))
accessCtlSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 18))
queuingMethodSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 19))
dhcpSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 20))
arpInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 22))
portOpModeSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 23))
portBasedVlanSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 24))
multicastPortSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 25))
multicastStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 26))
igmpFilteringProfileSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 27))
mvrSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 28))
clusterSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 29))
faultMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 30))
faultTrapsMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 31))
protoBasedVlanSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 32))
sysLogSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 33))
diffservSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 34))
layer3Setup = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 35))
routerVrrpSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 36))
routerVrrpStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 37))
routerDomainSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 38))
ipStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 39))
ospfExt = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 41))
mrstp = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 42))
dhcpSnp = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 100))
ipsg = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 101))
arpInspect = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 102))
trTCMSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 103))
loopGuardSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 104))
subnetBasedVlanSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 105))
macAuthenticationSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 106))
mstp = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 107))
radiusServerSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 108))
tacacsServerSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 109))
aaaSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 110))
portIsolationSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 112))
l2ptSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 115))
vlanMappingSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 116))
transceiverInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 117))
dot3OamSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 118))
dot1agCfmSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 119))
vlanCounterSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 122))
sysMemoryPool = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 124))
pppoe = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 125))
arpLearningSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 126))
staticRouteSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 127))
routingStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 128))
errdisable = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 130))
cpuProtectionSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 131))
policyRouteSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 132))
privateVLANSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 133))
sFlowSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 134))
sysSwPlatformMajorVers = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 1, 1), Integer32()).setMaxAccess("readonly")
sysSwPlatformMinorVers = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 1, 2), Integer32()).setMaxAccess("readonly")
sysSwModelString = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 1, 3), DisplayString()).setMaxAccess("readonly")
sysSwVersionControlNbr = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 1, 4), Integer32()).setMaxAccess("readonly")
sysSwDay = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 1, 5), Integer32()).setMaxAccess("readonly")
sysSwMonth = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 1, 6), Integer32()).setMaxAccess("readonly")
sysSwYear = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 1, 7), Integer32()).setMaxAccess("readonly")
sysHwMajorVers = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 1, 8), Integer32()).setMaxAccess("readonly")
sysHwMinorVers = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 1, 9), Integer32()).setMaxAccess("readonly")
sysSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 1, 10), DisplayString()).setMaxAccess("readonly")
rateLimitState = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 2, 1), EnabledStatus()).setMaxAccess("readwrite")
rateLimitPortTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 2, 2), )
rateLimitPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 2, 2, 1), ).setIndexNames((0, "BRIDGE-MIB", "dot1dBasePort"))
rateLimitPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 2, 2, 1, 1), EnabledStatus()).setMaxAccess("readwrite")
rateLimitPortCommitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 2, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
rateLimitPortPeakRate = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 2, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
rateLimitPortEgrRate = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 2, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
rateLimitPortPeakState = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 2, 2, 1, 5), EnabledStatus()).setMaxAccess("readwrite")
rateLimitPortEgrState = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 2, 2, 1, 6), EnabledStatus()).setMaxAccess("readwrite")
rateLimitPortCommitState = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 2, 2, 1, 7), EnabledStatus()).setMaxAccess("readwrite")
brLimitState = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 3, 1), EnabledStatus()).setMaxAccess("readwrite")
brLimitPortTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 3, 2), )
brLimitPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 3, 2, 1), ).setIndexNames((0, "BRIDGE-MIB", "dot1dBasePort"))
brLimitPortBrState = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 3, 2, 1, 1), EnabledStatus()).setMaxAccess("readwrite")
brLimitPortBrRate = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 3, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
brLimitPortMcState = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 3, 2, 1, 3), EnabledStatus()).setMaxAccess("readwrite")
brLimitPortMcRate = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 3, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
brLimitPortDlfState = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 3, 2, 1, 5), EnabledStatus()).setMaxAccess("readwrite")
brLimitPortDlfRate = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 3, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
portSecurityState = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 4, 1), EnabledStatus()).setMaxAccess("readwrite")
portSecurityPortTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 4, 2), )
portSecurityPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 4, 2, 1), ).setIndexNames((0, "BRIDGE-MIB", "dot1dBasePort"))
portSecurityPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 4, 2, 1, 1), EnabledStatus()).setMaxAccess("readwrite")
portSecurityPortLearnState = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 4, 2, 1, 2), EnabledStatus()).setMaxAccess("readwrite")
portSecurityPortCount = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 4, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
portSecurityMacFreeze = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 4, 3), PortList()).setMaxAccess("readwrite")
portSecurityVMLTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 4, 4), )
portSecurityVMLEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 4, 4, 1), ).setIndexNames((0, "ZYXEL-XGS4728F-MIB", "portSecurityVMLPort"), (0, "ZYXEL-XGS4728F-MIB", "portSecurityVMLVID"))
portSecurityVMLPort = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 4, 4, 1, 1), Integer32()).setMaxAccess("readonly")
portSecurityVMLVID = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 4, 4, 1, 2), Integer32()).setMaxAccess("readonly")
portSecurityVMLMacLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 4, 4, 1, 3), Integer32()).setMaxAccess("readwrite")
portSecurityVMLRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 4, 4, 1, 4), RowStatus()).setMaxAccess("readcreate")
vlanTrunkPortTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 5, 1), )
vlanTrunkPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 5, 1, 1), ).setIndexNames((0, "BRIDGE-MIB", "dot1dBasePort"))
vlanTrunkPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 5, 1, 1, 1), EnabledStatus()).setMaxAccess("readwrite")
ctlProtTransState = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 6, 1), EnabledStatus()).setMaxAccess("readwrite")
ctlProtTransTunnelPortTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 6, 2), )
ctlProtTransTunnelPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 6, 2, 1), ).setIndexNames((0, "BRIDGE-MIB", "dot1dBasePort"))
ctlProtTransTunnelMode = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3,))).clone(namedValues=NamedValues(("peer", 0), ("tunnel", 1), ("discard", 2), ("network", 3),))).setMaxAccess("readwrite")
vlanStackState = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 7, 1), EnabledStatus()).setMaxAccess("readwrite")
vlanStackPortTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 7, 3), )
vlanStackPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 7, 3, 1), ).setIndexNames((0, "BRIDGE-MIB", "dot1dBasePort"))
vlanStackPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 7, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3,))).clone(namedValues=NamedValues(("normal", 1), ("access", 2), ("tunnel", 3),))).setMaxAccess("readwrite")
vlanStackPortVid = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 7, 3, 1, 2), Integer32()).setMaxAccess("readwrite")
vlanStackPortPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 7, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7,))).clone(namedValues=NamedValues(("prioriry-0", 0), ("prioriry-1", 1), ("prioriry-2", 2), ("prioriry-3", 3), ("prioriry-4", 4), ("prioriry-5", 5), ("prioriry-6", 6), ("prioriry-7", 7),))).setMaxAccess("readwrite")
vlanStackTunnelPortTpid = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 7, 3, 1, 4), Integer32()).setMaxAccess("readwrite")
selectiveQinQTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 7, 4), )
selectiveQinQEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 7, 4, 1), ).setIndexNames((0, "ZYXEL-XGS4728F-MIB", "selectiveQinQPort"), (0, "ZYXEL-XGS4728F-MIB", "selectiveQinQCvid"))
selectiveQinQName = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 7, 4, 1, 1), DisplayString()).setMaxAccess("readwrite")
selectiveQinQPort = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 7, 4, 1, 2), Integer32()).setMaxAccess("readonly")
selectiveQinQCvid = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 7, 4, 1, 3), Integer32()).setMaxAccess("readonly")
selectiveQinQSpvid = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 7, 4, 1, 4), Integer32()).setMaxAccess("readwrite")
selectiveQinQPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 7, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7,))).clone(namedValues=NamedValues(("prioriry-0", 0), ("prioriry-1", 1), ("prioriry-2", 2), ("prioriry-3", 3), ("prioriry-4", 4), ("prioriry-5", 5), ("prioriry-6", 6), ("prioriry-7", 7),))).setMaxAccess("readwrite")
selectiveQinQRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 7, 4, 1, 6), RowStatus()).setMaxAccess("readcreate")
portAuthState = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 8, 3), EnabledStatus()).setMaxAccess("readwrite")
portAuthTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 8, 4), )
portAuthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 8, 4, 1), ).setIndexNames((0, "BRIDGE-MIB", "dot1dBasePort"))
portAuthEntryState = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 8, 4, 1, 1), EnabledStatus()).setMaxAccess("readwrite")
portReAuthEntryState = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 8, 4, 1, 2), EnabledStatus()).setMaxAccess("readwrite")
portReAuthEntryTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 8, 4, 1, 3), Integer32()).setMaxAccess("readwrite")
portAuthQuietPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 8, 4, 1, 4), Integer32()).setMaxAccess("readwrite")
portAuthTxPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 8, 4, 1, 5), Integer32()).setMaxAccess("readwrite")
portAuthSupplicantTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 8, 4, 1, 6), Integer32()).setMaxAccess("readwrite")
portAuthMaxRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 8, 4, 1, 7), Integer32()).setMaxAccess("readwrite")
portAuthGuestVlanState = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 8, 4, 1, 8), EnabledStatus()).setMaxAccess("readwrite")
portAuthGuestVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 8, 4, 1, 9), Integer32()).setMaxAccess("readwrite")
portAuthGuestVlanHostMode = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 8, 4, 1, 10), Integer32()).setMaxAccess("readwrite")
portAuthGuestVlanHostModeMultiSecureNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 8, 4, 1, 11), Integer32()).setMaxAccess("readwrite")
fanRpmTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 9, 1), )
fanRpmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 9, 1, 1), ).setIndexNames((0, "ZYXEL-XGS4728F-MIB", "fanRpmIndex"))
fanRpmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 9, 1, 1, 1), Integer32()).setMaxAccess("readonly")
fanRpmCurValue = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 9, 1, 1, 2), Integer32()).setMaxAccess("readonly")
fanRpmMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 9, 1, 1, 3), Integer32()).setMaxAccess("readonly")
fanRpmMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 9, 1, 1, 4), Integer32()).setMaxAccess("readonly")
fanRpmLowThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 9, 1, 1, 5), Integer32()).setMaxAccess("readonly")
fanRpmDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 9, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
tempTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 9, 2), )
tempEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 9, 2, 1), ).setIndexNames((0, "ZYXEL-XGS4728F-MIB", "tempIndex"))
tempIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 9, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3,))).clone(namedValues=NamedValues(("mac", 1), ("cpu", 2), ("phy", 3),))).setMaxAccess("readonly")
tempCurValue = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 9, 2, 1, 2), Integer32()).setMaxAccess("readonly")
tempMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 9, 2, 1, 3), Integer32()).setMaxAccess("readonly")
tempMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 9, 2, 1, 4), Integer32()).setMaxAccess("readonly")
tempHighThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 9, 2, 1, 5), Integer32()).setMaxAccess("readonly")
tempDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 9, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
voltageTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 9, 3), )
voltageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 9, 3, 1), ).setIndexNames((0, "ZYXEL-XGS4728F-MIB", "voltageIndex"))
voltageIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 9, 3, 1, 1), Integer32()).setMaxAccess("readonly")
voltageCurValue = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 9, 3, 1, 2), Integer32()).setMaxAccess("readonly")
voltageMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 9, 3, 1, 3), Integer32()).setMaxAccess("readonly")
voltageMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 9, 3, 1, 4), Integer32()).setMaxAccess("readonly")
voltageNominalValue = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 9, 3, 1, 5), Integer32()).setMaxAccess("readonly")
voltageLowThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 9, 3, 1, 6), Integer32()).setMaxAccess("readonly")
voltageDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 9, 3, 1, 7), DisplayString()).setMaxAccess("readonly")
snmpGetCommunity = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 10, 1), DisplayString()).setMaxAccess("readwrite")
snmpSetCommunity = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 10, 2), DisplayString()).setMaxAccess("readwrite")
snmpTrapCommunity = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 10, 3), DisplayString()).setMaxAccess("readwrite")
snmpTrapDestTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 10, 4), )
snmpTrapDestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 10, 4, 1), ).setIndexNames((0, "ZYXEL-XGS4728F-MIB", "snmpTrapDestIP"))
snmpTrapDestIP = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 10, 4, 1, 1), IpAddress()).setMaxAccess("readonly")
snmpTrapDestRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 10, 4, 1, 2), RowStatus()).setMaxAccess("readcreate")
snmpTrapDestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 10, 4, 1, 3), Integer32()).setMaxAccess("readwrite")
snmpTrapVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 10, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2,))).clone(namedValues=NamedValues(("v1", 0), ("v2c", 1), ("v3", 2),))).setMaxAccess("readwrite")
snmpTrapUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 10, 4, 1, 5), DisplayString()).setMaxAccess("readwrite")
snmpVersion = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 10, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2,))).clone(namedValues=NamedValues(("v2c", 0), ("v3", 1), ("v3v2c", 2),))).setMaxAccess("readwrite")
snmpUserTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 10, 6), )
snmpUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 10, 6, 1), ).setIndexNames((0, "ZYXEL-XGS4728F-MIB", "snmpUserName"))
snmpUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 10, 6, 1, 1), DisplayString()).setMaxAccess("readonly")
snmpUserSecurityLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 10, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2,))).clone(namedValues=NamedValues(("noAuthNoPriv", 0), ("authNoPriv", 1), ("authPriv", 2),))).setMaxAccess("readwrite")
snmpUserAuthProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 10, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1,))).clone(namedValues=NamedValues(("md5", 0), ("sha", 1),))).setMaxAccess("readwrite")
snmpUserPrivProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 10, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1,))).clone(namedValues=NamedValues(("des", 0), ("aes", 1),))).setMaxAccess("readwrite")
snmpUserGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 10, 6, 1, 5), DisplayString()).setMaxAccess("readonly")
snmpTrapGroupTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 10, 7), )
snmpTrapGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 10, 7, 1), ).setIndexNames((0, "ZYXEL-XGS4728F-MIB", "snmpTrapDestIP"))
snmpTrapSystemGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 10, 7, 1, 1), Bits().clone(namedValues=NamedValues(("coldStart", 0), ("warmStart", 1), ("fanSpeed", 2), ("temperature", 3), ("voltage", 4), ("reset", 5), ("timeSync", 6), ("intrusionlock", 7), ("loopGuard", 13),))).setMaxAccess("readwrite")
snmpTrapInterfaceGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 10, 7, 1, 2), Bits().clone(namedValues=NamedValues(("linkup", 0), ("linkdown", 1), ("autonegotiation", 2), ("lldp", 3), ("transceiver-ddm", 4),))).setMaxAccess("readwrite")
snmpTrapAAAGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 10, 7, 1, 3), Bits().clone(namedValues=NamedValues(("authentication", 0), ("accounting", 1),))).setMaxAccess("readwrite")
snmpTrapIPGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 10, 7, 1, 4), Bits().clone(namedValues=NamedValues(("ping", 0), ("traceroute", 1),))).setMaxAccess("readwrite")
snmpTrapSwitchGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 10, 7, 1, 5), Bits().clone(namedValues=NamedValues(("stp", 0), ("mactable", 1), ("rmon", 2), ("cfm", 3),))).setMaxAccess("readwrite")
dateTimeServerType = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4,))).clone(namedValues=NamedValues(("none", 1), ("daytime", 2), ("time", 3), ("ntp", 4),))).setMaxAccess("readwrite")
dateTimeServerIP = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 11, 2), IpAddress()).setMaxAccess("readwrite")
dateTimeZone = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 11, 3), Integer32()).setMaxAccess("readwrite")
dateTimeNewDateYear = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 11, 4), Integer32()).setMaxAccess("readwrite")
dateTimeNewDateMonth = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 11, 5), Integer32()).setMaxAccess("readwrite")
dateTimeNewDateDay = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 11, 6), Integer32()).setMaxAccess("readwrite")
dateTimeNewTimeHour = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 11, 7), Integer32()).setMaxAccess("readwrite")
dateTimeNewTimeMinute = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 11, 8), Integer32()).setMaxAccess("readwrite")
dateTimeNewTimeSecond = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 11, 9), Integer32()).setMaxAccess("readwrite")
dateTimeDaylightSavingTimeSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 11, 10))
daylightSavingTimeState = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 11, 10, 1), EnabledStatus()).setMaxAccess("readwrite")
daylightSavingTimeStartDateWeek = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 11, 10, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5,))).clone(namedValues=NamedValues(("first", 1), ("second", 2), ("third", 3), ("fourth", 4), ("last", 5),))).setMaxAccess("readwrite")
daylightSavingTimeStartDateDay = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 11, 10, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6,))).clone(namedValues=NamedValues(("sunday", 0), ("monday", 1), ("tuesday", 2), ("wednesday", 3), ("thursday", 4), ("friday", 5), ("saturday", 6),))).setMaxAccess("readwrite")
daylightSavingTimeStartDateMonth = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 11, 10, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,))).clone(namedValues=NamedValues(("january", 1), ("february", 2), ("march", 3), ("april", 4), ("may", 5), ("june", 6), ("july", 7), ("august", 8), ("september", 9), ("october", 10), ("november", 11), ("december", 12),))).setMaxAccess("readwrite")
daylightSavingTimeStartDateHour = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 11, 10, 5), Integer32()).setMaxAccess("readwrite")
daylightSavingTimeEndDateWeek = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 11, 10, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5,))).clone(namedValues=NamedValues(("first", 1), ("second", 2), ("third", 3), ("fourth", 4), ("last", 5),))).setMaxAccess("readwrite")
daylightSavingTimeEndDateDay = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 11, 10, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6,))).clone(namedValues=NamedValues(("sunday", 0), ("monday", 1), ("tuesday", 2), ("wednesday", 3), ("thursday", 4), ("friday", 5), ("saturday", 6),))).setMaxAccess("readwrite")
daylightSavingTimeEndDateMonth = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 11, 10, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,))).clone(namedValues=NamedValues(("january", 1), ("february", 2), ("march", 3), ("april", 4), ("may", 5), ("june", 6), ("july", 7), ("august", 8), ("september", 9), ("october", 10), ("november", 11), ("december", 12),))).setMaxAccess("readwrite")
daylightSavingTimeEndDateHour = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 11, 10, 9), Integer32()).setMaxAccess("readwrite")
sysMgmtConfigSave = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 12, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2,))).clone(namedValues=NamedValues(("config-1", 1), ("config-2", 2),))).setMaxAccess("readwrite")
sysMgmtBootupConfig = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 12, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2,))).clone(namedValues=NamedValues(("config-1", 1), ("config-2", 2),))).setMaxAccess("readwrite")
sysMgmtReboot = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 12, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1,))).clone(namedValues=NamedValues(("nothing", 0), ("reboot", 1),))).setMaxAccess("readwrite")
sysMgmtDefaultConfig = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 12, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1,))).clone(namedValues=NamedValues(("nothing", 0), ("reset-to-default", 1),))).setMaxAccess("readwrite")
sysMgmtLastActionStatus = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 12, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2,))).clone(namedValues=NamedValues(("none", 0), ("success", 1), ("fail", 2),))).setMaxAccess("readonly")
sysMgmtSystemStatus = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 12, 6), Bits().clone(namedValues=NamedValues(("sysAlarmDetected", 0), ("sysTemperatureError", 1), ("sysFanRPMError", 2), ("sysVoltageRangeError", 3),))).setMaxAccess("readonly")
sysMgmtCPUUsage = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 12, 7), Integer32()).setMaxAccess("readonly")
sysMgmtBootupImage = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 12, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2,))).clone(namedValues=NamedValues(("image-1", 1), ("image-2", 2),))).setMaxAccess("readwrite")
sysMgmtCounterReset = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 12, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2,))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2),))).setMaxAccess("readwrite")
sysMgmtTftpServiceSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 12, 10))
sysMgmtTftpServerIp = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 12, 10, 1), IpAddress()).setMaxAccess("readwrite")
sysMgmtTftpRemoteFileName = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 12, 10, 2), DisplayString()).setMaxAccess("readwrite")
sysMgmtTftpConfigIndex = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 12, 10, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2,))).clone(namedValues=NamedValues(("config-1", 1), ("config-2", 2),))).setMaxAccess("readwrite")
sysMgmtTftpAction = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 12, 10, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3,))).clone(namedValues=NamedValues(("none", 0), ("backup-config", 1), ("restore-config", 2), ("merge-config", 3),))).setMaxAccess("readwrite")
sysMgmtTftpActionStatus = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 12, 10, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3,))).clone(namedValues=NamedValues(("none", 0), ("success", 1), ("fail", 2), ("under-action", 3),))).setMaxAccess("readonly")
sysMgmtTftpActionPrivilege13 = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 12, 10, 113), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3,))).clone(namedValues=NamedValues(("none", 0), ("backup-config", 1), ("restore-config", 2), ("merge-config", 3),))).setMaxAccess("readwrite")
sysMgmtConfigSavePrivilege13 = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 12, 113), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2,))).clone(namedValues=NamedValues(("config-1", 1), ("config-2", 2),))).setMaxAccess("readwrite")
sysMgmtDefaultConfigPrivilege13 = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 12, 213), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1,))).clone(namedValues=NamedValues(("nothing", 0), ("reset-to-default", 1),))).setMaxAccess("readwrite")
vlanTypeSetup = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 13, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2,))).clone(namedValues=NamedValues(("dot1Q", 1), ("port-based", 2),))).setMaxAccess("readwrite")
igmpSnoopingStateSetup = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 13, 2), EnabledStatus()).setMaxAccess("readwrite")
tagVlanPortIsolationState = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 13, 3), EnabledStatus()).setMaxAccess("readwrite")
stpState = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 13, 4), EnabledStatus()).setMaxAccess("readwrite")
igmpFilteringStateSetup = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 13, 5), EnabledStatus()).setMaxAccess("readwrite")
unknownMulticastFrameForwarding = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 13, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2,))).clone(namedValues=NamedValues(("flooding", 1), ("drop", 2),))).setMaxAccess("readwrite")
multicastGrpHostTimeout = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 13, 7), Integer32()).setMaxAccess("readwrite")
reservedMulticastFrameForwarding = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 13, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2,))).clone(namedValues=NamedValues(("flooding", 1), ("drop", 2),))).setMaxAccess("readwrite")
igmpsnp8021pPriority = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 13, 10), Integer32()).setMaxAccess("readwrite")
igmpsnpVlanMode = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 13, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2,))).clone(namedValues=NamedValues(("auto", 1), ("fixed", 2),))).setMaxAccess("readwrite")
stpMode = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 13, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3,))).clone(namedValues=NamedValues(("rstp", 1), ("mrstp", 2), ("mstp", 3),))).setMaxAccess("readwrite")
igmpsnpVlanTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 13, 13), )
igmpsnpVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 13, 13, 1), ).setIndexNames((0, "ZYXEL-XGS4728F-MIB", "igmpsnpVid"))
igmpsnpVid = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 13, 13, 1, 1), Integer32()).setMaxAccess("readonly")
igmpsnpVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 13, 13, 1, 2), DisplayString()).setMaxAccess("readwrite")
igmpsnpVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 13, 13, 1, 3), RowStatus()).setMaxAccess("readcreate")
igmpsnpQuerierMode = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 13, 14), EnabledStatus()).setMaxAccess("readwrite")
ethernetCfmStateSetup = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 13, 15), EnabledStatus()).setMaxAccess("readwrite")
lldpStateSetup = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 13, 16), EnabledStatus()).setMaxAccess("readwrite")
igmpSnpReportProxySetup = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 13, 17), EnabledStatus()).setMaxAccess("readwrite")
smartIsolationState = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 13, 18), EnabledStatus()).setMaxAccess("readwrite")
dnsIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 14, 1), IpAddress()).setMaxAccess("readwrite")
defaultMgmt = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 14, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1,))).clone(namedValues=NamedValues(("in-band", 0), ("out-of-band", 1),))).setMaxAccess("readwrite")
defaultGateway = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 14, 3), IpAddress()).setMaxAccess("readwrite")
outOfBandIpSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 14, 4))
outOfBandIp = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 14, 4, 1), IpAddress()).setMaxAccess("readwrite")
outOfBandSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 14, 4, 2), IpAddress()).setMaxAccess("readwrite")
outOfBandGateway = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 14, 4, 3), IpAddress()).setMaxAccess("readwrite")
maxNumOfInbandIp = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 14, 5), Integer32()).setMaxAccess("readonly")
inbandIpTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 14, 6), )
inbandIpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 14, 6, 1), ).setIndexNames((0, "ZYXEL-XGS4728F-MIB", "inbandEntryIp"), (0, "ZYXEL-XGS4728F-MIB", "inbandEntrySubnetMask"))
inbandEntryIp = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 14, 6, 1, 1), IpAddress()).setMaxAccess("readwrite")
inbandEntrySubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 14, 6, 1, 2), IpAddress()).setMaxAccess("readwrite")
inbandEntryVid = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 14, 6, 1, 3), Integer32()).setMaxAccess("readwrite")
inbandEntryRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 14, 6, 1, 4), RowStatus()).setMaxAccess("readcreate")
filterTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 15, 1), )
filterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 15, 1, 1), ).setIndexNames((0, "ZYXEL-XGS4728F-MIB", "filterMacAddr"), (0, "ZYXEL-XGS4728F-MIB", "filterVid"))
filterName = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 15, 1, 1, 1), DisplayString()).setMaxAccess("readwrite")
filterActionState = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 15, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3,))).clone(namedValues=NamedValues(("discard-source", 1), ("discard-destination", 2), ("both", 3),))).setMaxAccess("readwrite")
filterMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 15, 1, 1, 3), MacAddress())
filterVid = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 15, 1, 1, 4), Integer32())
filterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 15, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
mirrorState = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 16, 1), EnabledStatus()).setMaxAccess("readwrite")
mirrorMonitorPort = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 16, 2), Integer32()).setMaxAccess("readwrite")
mirrorTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 16, 3), )
mirrorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 16, 3, 1), ).setIndexNames((0, "BRIDGE-MIB", "dot1dBasePort"))
mirrorMirroredState = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 16, 3, 1, 1), EnabledStatus()).setMaxAccess("readwrite")
mirrorDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 16, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2,))).clone(namedValues=NamedValues(("ingress", 0), ("egress", 1), ("both", 2),))).setMaxAccess("readwrite")
aggrState = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 17, 1), EnabledStatus()).setMaxAccess("readwrite")
aggrSystemPriority = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 17, 2), Integer32()).setMaxAccess("readwrite")
aggrGroupTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 17, 3), )
aggrGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 17, 3, 1), ).setIndexNames((0, "ZYXEL-XGS4728F-MIB", "aggrGroupIndex"))
aggrGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 17, 3, 1, 1), Integer32()).setMaxAccess("readonly")
aggrGroupState = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 17, 3, 1, 2), EnabledStatus()).setMaxAccess("readwrite")
aggrGroupDynamicState = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 17, 3, 1, 3), EnabledStatus()).setMaxAccess("readwrite")
aggrGroupCriteria = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 17, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6,))).clone(namedValues=NamedValues(("src-mac", 1), ("dst-mac", 2), ("src-dst-mac", 3), ("src-ip", 4), ("dst-ip", 5), ("src-dst-ip", 6),))).setMaxAccess("readwrite")
aggrPortTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 17, 4), )
aggrPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 17, 4, 1), ).setIndexNames((0, "BRIDGE-MIB", "dot1dBasePort"))
aggrPortGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 17, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,))).clone(namedValues=NamedValues(("none", 0), ("t1", 1), ("t2", 2), ("t3", 3), ("t4", 4), ("t5", 5), ("t6", 6), ("t7", 7), ("t8", 8), ("t9", 9), ("t10", 10), ("t11", 11), ("t12", 12),))).setMaxAccess("readwrite")
aggrPortDynamicStateTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 17, 4, 1, 2), Integer32()).setMaxAccess("readwrite")
accessCtlTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 18, 1), )
accessCtlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 18, 1, 1), ).setIndexNames((0, "ZYXEL-XGS4728F-MIB", "accessCtlService"))
accessCtlService = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 18, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7,))).clone(namedValues=NamedValues(("telnet", 1), ("ssh", 2), ("ftp", 3), ("http", 4), ("https", 5), ("icmp", 6), ("snmp", 7),))).setMaxAccess("readonly")
accessCtlEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 18, 1, 1, 2), EnabledStatus()).setMaxAccess("readwrite")
accessCtlServicePort = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 18, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
accessCtlTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 18, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
securedClientTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 18, 2), )
securedClientEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 18, 2, 1), ).setIndexNames((0, "ZYXEL-XGS4728F-MIB", "securedClientIndex"))
securedClientIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 18, 2, 1, 1), Integer32()).setMaxAccess("readonly")
securedClientEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 18, 2, 1, 2), EnabledStatus()).setMaxAccess("readwrite")
securedClientStartIp = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 18, 2, 1, 3), IpAddress()).setMaxAccess("readwrite")
securedClientEndIp = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 18, 2, 1, 4), IpAddress()).setMaxAccess("readwrite")
securedClientService = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 18, 2, 1, 5), Bits().clone(namedValues=NamedValues(("telnet", 0), ("ftp", 1), ("http", 2), ("icmp", 3), ("snmp", 4), ("ssh", 5), ("https", 6),))).setMaxAccess("readwrite")
portQueuingMethodTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 19, 1), )
portQueuingMethodEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 19, 1, 1), ).setIndexNames((0, "BRIDGE-MIB", "dot1dBasePort"), (0, "ZYXEL-XGS4728F-MIB", "portQueuingMethodQueue"))
portQueuingMethodQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 19, 1, 1, 1), Integer32()).setMaxAccess("readonly")
portQueuingMethodWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 19, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
portQueuingMethodMode = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 19, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2,))).clone(namedValues=NamedValues(("strictly-priority", 0), ("weighted-fair-scheduling", 1), ("weighted-round-robin", 2),))).setMaxAccess("readwrite")
portQueuingMethodHybridSpqTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 19, 2), )
portQueuingMethodHybridSpqEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 19, 2, 1), ).setIndexNames((0, "BRIDGE-MIB", "dot1dBasePort"))
portQueuingMethodHybridSpq = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 19, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8,))).clone(namedValues=NamedValues(("none", 0), ("q0", 1), ("q1", 2), ("q2", 3), ("q3", 4), ("q4", 5), ("q5", 6), ("q6", 7), ("q7", 8),))).setMaxAccess("readwrite")
globalDhcpRelay = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 20, 1))
globalDhcpRelayEnable = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 20, 1, 1), EnabledStatus()).setMaxAccess("readwrite")
globalDhcpRelayOption82Enable = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 20, 1, 2), EnabledStatus()).setMaxAccess("readwrite")
globalDhcpRelayInfoEnable = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 20, 1, 3), EnabledStatus()).setMaxAccess("readwrite")
globalDhcpRelayInfoData = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 20, 1, 4), DisplayString()).setMaxAccess("readonly")
maxNumberOfGlobalDhcpRelayRemoteServer = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 20, 1, 5), Integer32()).setMaxAccess("readonly")
globalDhcpRelayRemoteServerTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 20, 1, 6), )
globalDhcpRelayRemoteServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 20, 1, 6, 1), ).setIndexNames((0, "ZYXEL-XGS4728F-MIB", "globalDhcpRelayRemoteServerIp"))
globalDhcpRelayRemoteServerIp = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 20, 1, 6, 1, 1), IpAddress()).setMaxAccess("readonly")
globalDhcpRelayRemoteServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 20, 1, 6, 1, 2), RowStatus()).setMaxAccess("readcreate")
dhcpServer = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 20, 2))
maxNumberOfDhcpServers = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 20, 2, 1), Integer32()).setMaxAccess("readonly")
dhcpServerTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 20, 2, 2), )
dhcpServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 20, 2, 2, 1), ).setIndexNames((0, "ZYXEL-XGS4728F-MIB", "dhcpServerVid"))
dhcpServerVid = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 20, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
dhcpServerStartAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 20, 2, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
dhcpServerPoolSize = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 20, 2, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
dhcpServerMask = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 20, 2, 2, 1, 4), IpAddress()).setMaxAccess("readwrite")
dhcpServerGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 20, 2, 2, 1, 5), IpAddress()).setMaxAccess("readwrite")
dhcpServerPrimaryDNS = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 20, 2, 2, 1, 6), IpAddress()).setMaxAccess("readwrite")
dhcpServerSecondaryDNS = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 20, 2, 2, 1, 7), IpAddress()).setMaxAccess("readwrite")
dhcpServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 20, 2, 2, 1, 8), RowStatus()).setMaxAccess("readcreate")
dhcpRelay = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 20, 3))
dhcpRelayInfoData = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 20, 3, 1), DisplayString()).setMaxAccess("readonly")
maxNumberOfDhcpRelay = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 20, 3, 2), Integer32()).setMaxAccess("readonly")
maxNumberOfDhcpRelayRemoteServer = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 20, 3, 3), Integer32()).setMaxAccess("readonly")
dhcpRelayRemoteServerTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 20, 3, 4), )
dhcpRelayRemoteServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 20, 3, 4, 1), ).setIndexNames((0, "ZYXEL-XGS4728F-MIB", "dhcpRelayVid"), (0, "ZYXEL-XGS4728F-MIB", "dhcpRelayRemoteServerIp"))
dhcpRelayVid = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 20, 3, 4, 1, 1), Integer32()).setMaxAccess("readonly")
dhcpRelayRemoteServerIp = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 20, 3, 4, 1, 2), IpAddress()).setMaxAccess("readonly")
dhcpRelayRemoteServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 20, 3, 4, 1, 3), RowStatus()).setMaxAccess("readcreate")
dhcpRelayTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 20, 3, 5), )
dhcpRelayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 20, 3, 5, 1), ).setIndexNames((0, "ZYXEL-XGS4728F-MIB", "dhcpRelayVid"))
dhcpRelayOption82Enable = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 20, 3, 5, 1, 1), EnabledStatus()).setMaxAccess("readwrite")
dhcpRelayInfoEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 20, 3, 5, 1, 2), EnabledStatus()).setMaxAccess("readwrite")
arpTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 22, 1), )
arpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 22, 1, 1), ).setIndexNames((0, "ZYXEL-XGS4728F-MIB", "arpIpAddr"), (0, "ZYXEL-XGS4728F-MIB", "arpMacVid"))
arpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 22, 1, 1, 1), Integer32()).setMaxAccess("readonly")
arpIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 22, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
arpMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 22, 1, 1, 3), MacAddress()).setMaxAccess("readonly")
arpMacVid = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 22, 1, 1, 4), Integer32()).setMaxAccess("readonly")
arpType = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 22, 1, 1, 5), Integer32()).setMaxAccess("readonly")
portOpModePortTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 23, 1), )
portOpModePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 23, 1, 1), ).setIndexNames((0, "BRIDGE-MIB", "dot1dBasePort"))
portOpModePortSpeedDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 23, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7,))).clone(namedValues=NamedValues(("auto", 0), ("speed-10-half", 1), ("speed-10-full", 2), ("speed-100-half", 3), ("speed-100-full", 4), ("speed-1000-full", 5), ("speed-10000-full", 6), ("speed-12000-full", 7),))).setMaxAccess("readwrite")
portOpModePortFlowCntl = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 23, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1,))).clone(namedValues=NamedValues(("off", 0), ("on", 1),))).setMaxAccess("readwrite")
portOpModePortName = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 23, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0,64))).setMaxAccess("readwrite")
portOpModePortModuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 23, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2,))).clone(namedValues=NamedValues(("fast-ethernet-10-100", 0), ("gigabit-ethernet-100-1000", 1), ("xg-ethernet-10000", 2),))).setMaxAccess("readonly")
portOpModePortLinkUpType = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 23, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4,))).clone(namedValues=NamedValues(("down", 0), ("utp", 1), ("sfp", 2), ("xfp", 3), ("cx4", 4),))).setMaxAccess("readonly")
portOpModePortIntrusionLock = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 23, 1, 1, 6), EnabledStatus()).setMaxAccess("readwrite")
portOpModePortLBTestStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 23, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3,))).clone(namedValues=NamedValues(("none", 0), ("under-testing", 1), ("success", 2), ("fail", 3),))).setMaxAccess("readonly")
portOpModePortCounterReset = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 23, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2,))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2),))).setMaxAccess("readwrite")
portOpModePortCX4CableLength = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 23, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5,))).clone(namedValues=NamedValues(("half-meter", 0), ("one-meter", 1), ("three-meters", 2), ("five-meters", 3), ("ten-meters", 4), ("fifteen-meters", 5),))).setMaxAccess("readwrite")
portBasedVlanPortListTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 24, 1), )
portBasedVlanPortListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 24, 1, 1), ).setIndexNames((0, "BRIDGE-MIB", "dot1dBasePort"))
portBasedVlanPortListMembers = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 24, 1, 1, 1), PortList()).setMaxAccess("readwrite")
multicastPortTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 25, 1), )
multicastPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 25, 1, 1), ).setIndexNames((0, "BRIDGE-MIB", "dot1dBasePort"))
multicastPortMaxGroupLimited = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 25, 1, 1, 2), EnabledStatus()).setMaxAccess("readwrite")
multicastPortMaxOfGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 25, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
multicastPortIgmpFilteringProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 25, 1, 1, 4), DisplayString()).setMaxAccess("readwrite")
multicastPortQuerierMode = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 25, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3,))).clone(namedValues=NamedValues(("auto", 1), ("fixed", 2), ("edge", 3),))).setMaxAccess("readwrite")
multicastPortThrottlingAction = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 25, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2,))).clone(namedValues=NamedValues(("deny", 1), ("replace", 2),))).setMaxAccess("readwrite")
multicastPortLeaveMode = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 25, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2,))).clone(namedValues=NamedValues(("normal", 0), ("immediate", 1), ("fast", 2),))).setMaxAccess("readwrite")
multicastPortLeaveTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 25, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
multicastPortFastLeaveTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 25, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
multicastStatusTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 26, 1), )
multicastStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 26, 1, 1), ).setIndexNames((0, "ZYXEL-XGS4728F-MIB", "multicastStatusVlanID"), (0, "ZYXEL-XGS4728F-MIB", "multicastStatusPort"), (0, "ZYXEL-XGS4728F-MIB", "multicastStatusGroup"))
multicastStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 26, 1, 1, 1), Integer32()).setMaxAccess("readonly")
multicastStatusVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 26, 1, 1, 2), Integer32()).setMaxAccess("readonly")
multicastStatusPort = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 26, 1, 1, 3), Integer32()).setMaxAccess("readonly")
multicastStatusGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 26, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
multicastVlanStatusTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 26, 2), )
multicastVlanStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 26, 2, 1), ).setIndexNames((0, "ZYXEL-XGS4728F-MIB", "multicastVlanStatusVlanID"))
multicastVlanStatusVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 26, 2, 1, 1), Integer32()).setMaxAccess("readonly")
multicastVlanStatusType = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 26, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3,))).clone(namedValues=NamedValues(("dynamic", 1), ("mvr", 2), ("static", 3),))).setMaxAccess("readonly")
multicastVlanQueryPort = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 26, 2, 1, 3), PortList()).setMaxAccess("readonly")
igmpSnpCountTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 26, 3), )
igmpSnpCountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 26, 3, 1), ).setIndexNames((0, "ZYXEL-XGS4728F-MIB", "igmpSnpCountIndex"))
igmpSnpCountIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 26, 3, 1, 1), Integer32()).setMaxAccess("readonly")
igmpSnpV2CountQueryRx = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 26, 3, 1, 2), Integer32()).setMaxAccess("readonly")
igmpSnpV2CountReportRx = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 26, 3, 1, 3), Integer32()).setMaxAccess("readonly")
igmpSnpV2CountLeaveRx = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 26, 3, 1, 4), Integer32()).setMaxAccess("readonly")
igmpSnpV2CountQueryRxDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 26, 3, 1, 5), Integer32()).setMaxAccess("readonly")
igmpSnpV2CountReportRxDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 26, 3, 1, 6), Integer32()).setMaxAccess("readonly")
igmpSnpV2CountLeaveRxDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 26, 3, 1, 7), Integer32()).setMaxAccess("readonly")
igmpSnpV2CountQueryTx = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 26, 3, 1, 8), Integer32()).setMaxAccess("readonly")
igmpSnpV2CountReportTx = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 26, 3, 1, 9), Integer32()).setMaxAccess("readonly")
igmpSnpV2CountLeaveTx = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 26, 3, 1, 10), Integer32()).setMaxAccess("readonly")
igmpSnpV3CountQueryRx = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 26, 3, 1, 11), Integer32()).setMaxAccess("readonly")
igmpSnpV3CountReportRx = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 26, 3, 1, 12), Integer32()).setMaxAccess("readonly")
igmpSnpV3CountQueryRxDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 26, 3, 1, 13), Integer32()).setMaxAccess("readonly")
igmpSnpV3CountReportRxDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 26, 3, 1, 14), Integer32()).setMaxAccess("readonly")
igmpSnpV3CountQueryTx = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 26, 3, 1, 15), Integer32()).setMaxAccess("readonly")
igmpSnpV3CountReportTx = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 26, 3, 1, 16), Integer32()).setMaxAccess("readonly")
igmpSnpCountVlanTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 26, 4), )
igmpSnpCountVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 26, 4, 1), ).setIndexNames((0, "ZYXEL-XGS4728F-MIB", "igmpSnpCountVlanIndex"))
igmpSnpCountVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 26, 4, 1, 1), Integer32()).setMaxAccess("readonly")
igmpSnpV2CountVlanQueryRx = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 26, 4, 1, 2), Integer32()).setMaxAccess("readonly")
igmpSnpV2CountVlanReportRx = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 26, 4, 1, 3), Integer32()).setMaxAccess("readonly")
igmpSnpV2CountVlanLeaveRx = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 26, 4, 1, 4), Integer32()).setMaxAccess("readonly")
igmpSnpV2CountVlanQueryRxDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 26, 4, 1, 5), Integer32()).setMaxAccess("readonly")
igmpSnpV2CountVlanReportRxDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 26, 4, 1, 6), Integer32()).setMaxAccess("readonly")
igmpSnpV2CountVlanLeaveRxDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 26, 4, 1, 7), Integer32()).setMaxAccess("readonly")
igmpSnpV2CountVlanQueryTx = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 26, 4, 1, 8), Integer32()).setMaxAccess("readonly")
igmpSnpV2CountVlanReportTx = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 26, 4, 1, 9), Integer32()).setMaxAccess("readonly")
igmpSnpV2CountVlanLeaveTx = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 26, 4, 1, 10), Integer32()).setMaxAccess("readonly")
igmpSnpV3CountVlanQueryRx = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 26, 4, 1, 11), Integer32()).setMaxAccess("readonly")
igmpSnpV3CountVlanReportRx = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 26, 4, 1, 12), Integer32()).setMaxAccess("readonly")
igmpSnpV3CountVlanQueryRxDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 26, 4, 1, 13), Integer32()).setMaxAccess("readonly")
igmpSnpV3CountVlanReportRxDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 26, 4, 1, 14), Integer32()).setMaxAccess("readonly")
igmpSnpV3CountVlanQueryTx = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 26, 4, 1, 15), Integer32()).setMaxAccess("readonly")
igmpSnpV3CountVlanReportTx = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 26, 4, 1, 16), Integer32()).setMaxAccess("readonly")
igmpSnpCountPortTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 26, 5), )
igmpSnpCountPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 26, 5, 1), ).setIndexNames((0, "BRIDGE-MIB", "dot1dBasePort"))
igmpSnpV2CountPortQueryRx = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 26, 5, 1, 1), Integer32()).setMaxAccess("readonly")
igmpSnpV2CountPortReportRx = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 26, 5, 1, 2), Integer32()).setMaxAccess("readonly")
igmpSnpV2CountPortLeaveRx = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 26, 5, 1, 3), Integer32()).setMaxAccess("readonly")
igmpSnpV2CountPortReportRxDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 26, 5, 1, 4), Integer32()).setMaxAccess("readonly")
igmpSnpV2CountPortLeaveRxDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 26, 5, 1, 5), Integer32()).setMaxAccess("readonly")
igmpSnpV2CountPortReportTx = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 26, 5, 1, 6), Integer32()).setMaxAccess("readonly")
igmpSnpV2CountPortLeaveTx = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 26, 5, 1, 7), Integer32()).setMaxAccess("readonly")
igmpSnpV3CountPortQueryRx = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 26, 5, 1, 8), Integer32()).setMaxAccess("readonly")
igmpSnpV3CountPortReportRx = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 26, 5, 1, 9), Integer32()).setMaxAccess("readonly")
igmpSnpV3CountPortReportRxDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 26, 5, 1, 10), Integer32()).setMaxAccess("readonly")
igmpSnpV3CountPortReportTx = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 26, 5, 1, 11), Integer32()).setMaxAccess("readonly")
igmpSnpGroupCountStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 26, 6))
igmpSnpGroupCountNum = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 26, 6, 1), Integer32()).setMaxAccess("readonly")
igmpSnpGroupCountVlanTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 26, 6, 2), )
igmpSnpGroupCountVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 26, 6, 2, 1), ).setIndexNames((0, "ZYXEL-XGS4728F-MIB", "igmpSnpGroupCountVlanIndex"))
igmpSnpGroupCountVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 26, 6, 2, 1, 1), Integer32()).setMaxAccess("readonly")
igmpSnpGroupCountVlanNum = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 26, 6, 2, 1, 2), Integer32()).setMaxAccess("readonly")
igmpSnpGroupCountPortTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 26, 6, 3), )
igmpSnpGroupCountPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 26, 6, 3, 1), ).setIndexNames((0, "BRIDGE-MIB", "dot1dBasePort"))
igmpSnpGroupCountPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 26, 6, 3, 1, 1), Integer32()).setMaxAccess("readonly")
igmpFilteringMaxNumberOfProfile = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 27, 1), Integer32()).setMaxAccess("readonly")
igmpFilteringProfileTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 27, 2), )
igmpFilteringProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 27, 2, 1), ).setIndexNames((0, "ZYXEL-XGS4728F-MIB", "igmpFilteringProfileName"), (0, "ZYXEL-XGS4728F-MIB", "igmpFilteringProfileStartAddress"), (0, "ZYXEL-XGS4728F-MIB", "igmpFilteringProfileEndAddress"))
igmpFilteringProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 27, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
igmpFilteringProfileStartAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 27, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
igmpFilteringProfileEndAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 27, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
igmpFilteringProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 27, 2, 1, 4), RowStatus()).setMaxAccess("readcreate")
maxNumberOfMVR = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 28, 1), Integer32()).setMaxAccess("readonly")
mvrTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 28, 2), )
mvrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 28, 2, 1), ).setIndexNames((0, "ZYXEL-XGS4728F-MIB", "mvrVlanID"))
mvrVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 28, 2, 1, 1), Integer32()).setMaxAccess("readonly")
mvrName = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 28, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
mvrMode = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 28, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1,))).clone(namedValues=NamedValues(("dynamic", 0), ("compatible", 1),))).setMaxAccess("readwrite")
mvrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 28, 2, 1, 4), RowStatus()).setMaxAccess("readcreate")
mvr8021pPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 28, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
mvrPortTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 28, 3), )
mvrPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 28, 3, 1), ).setIndexNames((0, "ZYXEL-XGS4728F-MIB", "mvrVlanID"), (0, "BRIDGE-MIB", "dot1dBasePort"))
mvrPortRole = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 28, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3,))).clone(namedValues=NamedValues(("none", 1), ("source-port", 2), ("receiver-port", 3),))).setMaxAccess("readwrite")
mvrPortTagging = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 28, 3, 1, 2), EnabledStatus()).setMaxAccess("readwrite")
maxNumberOfMvrGroup = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 28, 4), Integer32()).setMaxAccess("readonly")
mvrGroupTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 28, 5), )
mvrGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 28, 5, 1), ).setIndexNames((0, "ZYXEL-XGS4728F-MIB", "mvrVlanID"), (0, "ZYXEL-XGS4728F-MIB", "mvrGroupName"))
mvrGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 28, 5, 1, 1), DisplayString()).setMaxAccess("readonly")
mvrGroupStartAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 28, 5, 1, 2), IpAddress()).setMaxAccess("readwrite")
mvrGroupEndAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 28, 5, 1, 3), IpAddress()).setMaxAccess("readwrite")
mvrGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 28, 5, 1, 4), RowStatus()).setMaxAccess("readcreate")
clusterManager = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 29, 1))
clusterMaxNumOfManager = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 29, 1, 1), Integer32()).setMaxAccess("readonly")
clusterManagerTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 29, 1, 2), )
clusterManagerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 29, 1, 2, 1), ).setIndexNames((0, "ZYXEL-XGS4728F-MIB", "clusterManagerVid"))
clusterManagerVid = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 29, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
clusterManagerName = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 29, 1, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
clusterManagerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 29, 1, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
clusterMembers = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 29, 2))
clusterMaxNumOfMember = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 29, 2, 1), Integer32()).setMaxAccess("readonly")
clusterMemberTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 29, 2, 2), )
clusterMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 29, 2, 2, 1), ).setIndexNames((0, "ZYXEL-XGS4728F-MIB", "clusterMemberMac"))
clusterMemberMac = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 29, 2, 2, 1, 1), MacAddress())
clusterMemberName = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 29, 2, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
clusterMemberModel = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 29, 2, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
clusterMemberPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 29, 2, 2, 1, 4), DisplayString()).setMaxAccess("readwrite")
clusterMemberRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 29, 2, 2, 1, 5), RowStatus()).setMaxAccess("readcreate")
clusterCandidates = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 29, 3))
clusterCandidateTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 29, 3, 1), )
clusterCandidateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 29, 3, 1, 1), ).setIndexNames((0, "ZYXEL-XGS4728F-MIB", "clusterCandidateMac"))
clusterCandidateMac = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 29, 3, 1, 1, 1), MacAddress()).setMaxAccess("readonly")
clusterCandidateName = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 29, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
clusterCandidateModel = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 29, 3, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
clusterStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 29, 4))
clusterStatusRole = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 29, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2,))).clone(namedValues=NamedValues(("none", 0), ("manager", 1), ("member", 2),))).setMaxAccess("readonly")
clusterStatusManager = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 29, 4, 2), DisplayString()).setMaxAccess("readonly")
clsuterStatusMaxNumOfMember = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 29, 4, 3), Integer32()).setMaxAccess("readonly")
clusterStatusMemberTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 29, 4, 4), )
clusterStatusMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 29, 4, 4, 1), ).setIndexNames((0, "ZYXEL-XGS4728F-MIB", "clusterStatusMemberMac"))
clusterStatusMemberMac = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 29, 4, 4, 1, 1), MacAddress()).setMaxAccess("readonly")
clusterStatusMemberName = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 29, 4, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
clusterStatusMemberModel = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 29, 4, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
clusterStatusMemberStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 29, 4, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2,))).clone(namedValues=NamedValues(("error", 0), ("online", 1), ("offline", 2),))).setMaxAccess("readonly")
class UtcTimeStamp(Unsigned32, TextualConvention):
    pass

class EventIdNumber(Integer32, TextualConvention):
    pass

class EventSeverity(Integer32, TextualConvention):
    subtypeSpec = Integer32.subtypeSpec+ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4,))
    namedValues = NamedValues(("critical", 1), ("major", 2), ("minor", 3), ("informational", 4),)

class EventServiceAffective(Integer32, TextualConvention):
    subtypeSpec = Integer32.subtypeSpec+ConstraintsUnion(SingleValueConstraint(1, 2,))
    namedValues = NamedValues(("noServiceAffected", 1), ("serviceAffected", 2),)

class InstanceType(Integer32, TextualConvention):
    subtypeSpec = Integer32.subtypeSpec+ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9,))
    namedValues = NamedValues(("unknown", 1), ("node", 2), ("shelf", 3), ("line", 4), ("switch", 5), ("lsp", 6), ("l2Interface", 7), ("l3Interface", 8), ("rowIndex", 9),)

eventObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 30, 1))
eventTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 30, 1, 1), )
eventEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 30, 1, 1, 1), ).setIndexNames((0, "ZYXEL-XGS4728F-MIB", "eventSeqNum"))
eventSeqNum = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 30, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
eventEventId = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 30, 1, 1, 1, 2), EventIdNumber()).setMaxAccess("readonly")
eventName = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 30, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,40))).setMaxAccess("readonly")
eventInstanceType = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 30, 1, 1, 1, 4), InstanceType()).setMaxAccess("readonly")
eventInstanceId = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 30, 1, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
eventInstanceName = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 30, 1, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
eventSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 30, 1, 1, 1, 7), EventSeverity()).setMaxAccess("readonly")
eventSetTime = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 30, 1, 1, 1, 8), UtcTimeStamp()).setMaxAccess("readonly")
eventDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 30, 1, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,255))).setMaxAccess("readonly")
eventServAffective = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 30, 1, 1, 1, 10), EventServiceAffective()).setMaxAccess("readonly")
eventInstanceIdNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 30, 1, 1, 1, 11), Integer32()).setMaxAccess("readonly")
trapInfoObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 31, 1))
trapNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 31, 2))
class EventPersistence(Integer32, TextualConvention):
    subtypeSpec = Integer32.subtypeSpec+ConstraintsUnion(SingleValueConstraint(1, 2,))
    namedValues = NamedValues(("normal", 1), ("delta", 2),)

trapRefSeqNum = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 31, 1, 1), Integer32()).setMaxAccess("readonly")
trapPersistence = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 31, 1, 2), EventPersistence()).setMaxAccess("readonly")
trapSenderNodeId = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 31, 1, 3), Integer32()).setMaxAccess("readonly")
trapSenderStatus = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 31, 1, 4), Integer32()).setMaxAccess("readonly")
eventOnTrap = NotificationType((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 31, 2, 1)).setObjects(*(("ZYXEL-XGS4728F-MIB", "eventSeqNum"), ("ZYXEL-XGS4728F-MIB", "eventEventId"), ("ZYXEL-XGS4728F-MIB", "eventName"), ("ZYXEL-XGS4728F-MIB", "eventSetTime"), ("ZYXEL-XGS4728F-MIB", "eventSeverity"), ("ZYXEL-XGS4728F-MIB", "eventInstanceType"), ("ZYXEL-XGS4728F-MIB", "eventInstanceId"), ("ZYXEL-XGS4728F-MIB", "eventInstanceName"), ("ZYXEL-XGS4728F-MIB", "eventServAffective"), ("ZYXEL-XGS4728F-MIB", "eventDescription"), ("ZYXEL-XGS4728F-MIB", "trapPersistence"), ("ZYXEL-XGS4728F-MIB", "trapSenderNodeId"), ("ZYXEL-XGS4728F-MIB", "sysObjectID"),))
eventClearedTrap = NotificationType((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 31, 2, 2)).setObjects(*(("ZYXEL-XGS4728F-MIB", "eventSeqNum"), ("ZYXEL-XGS4728F-MIB", "eventEventId"), ("ZYXEL-XGS4728F-MIB", "eventSetTime"), ("ZYXEL-XGS4728F-MIB", "eventInstanceType"), ("ZYXEL-XGS4728F-MIB", "eventInstanceId"), ("ZYXEL-XGS4728F-MIB", "trapRefSeqNum"), ("ZYXEL-XGS4728F-MIB", "trapSenderNodeId"), ("ZYXEL-XGS4728F-MIB", "sysObjectID"),))
protoBasedVlanTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 32, 1), )
protoBasedVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 32, 1, 1), ).setIndexNames((0, "ZYXEL-XGS4728F-MIB", "protoBasedVlanPort"), (0, "ZYXEL-XGS4728F-MIB", "protoBasedVlanPacketType"), (0, "ZYXEL-XGS4728F-MIB", "protoBasedVlanEtherType"))
protoBasedVlanPort = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 32, 1, 1, 1), Integer32()).setMaxAccess("readonly")
protoBasedVlanPacketType = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 32, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1,))).clone(namedValues=NamedValues(("etherII", 1),))).setMaxAccess("readonly")
protoBasedVlanEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 32, 1, 1, 3), Integer32()).setMaxAccess("readonly")
protoBasedVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 32, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,32))).setMaxAccess("readwrite")
protoBasedVlanVid = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 32, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,4094))).setMaxAccess("readwrite")
protoBasedVlanPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 32, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,7))).setMaxAccess("readwrite")
protoBasedVlanState = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 32, 1, 1, 7), RowStatus()).setMaxAccess("readcreate")
sysLogState = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 33, 1), EnabledStatus()).setMaxAccess("readwrite")
sysLogTypeTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 33, 2), )
sysLogTypeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 33, 2, 1), ).setIndexNames((0, "ZYXEL-XGS4728F-MIB", "sysLogTypeIndex"))
sysLogTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 33, 2, 1, 1), Integer32())
sysLogTypeName = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 33, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
sysLogTypeState = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 33, 2, 1, 3), EnabledStatus()).setMaxAccess("readwrite")
sysLogTypeFacility = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 33, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7,))).clone(namedValues=NamedValues(("local-user0", 0), ("local-user1", 1), ("local-user2", 2), ("local-user3", 3), ("local-user4", 4), ("local-user5", 5), ("local-user6", 6), ("local-user7", 7),))).setMaxAccess("readwrite")
sysLogServerTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 33, 3), )
sysLogServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 33, 3, 1), ).setIndexNames((0, "ZYXEL-XGS4728F-MIB", "sysLogServerAddress"))
sysLogServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 33, 3, 1, 1), IpAddress())
sysLogServerLogLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 33, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7,))).clone(namedValues=NamedValues(("level0", 0), ("level0-1", 1), ("level0-2", 2), ("level0-3", 3), ("level0-4", 4), ("level0-5", 5), ("level0-6", 6), ("level0-7", 7),))).setMaxAccess("readwrite")
sysLogServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 33, 3, 1, 3), RowStatus()).setMaxAccess("readcreate")
diffservState = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 34, 1), EnabledStatus()).setMaxAccess("readwrite")
diffservMapTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 34, 2), )
diffservMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 34, 2, 1), ).setIndexNames((0, "ZYXEL-XGS4728F-MIB", "diffservMapDscp"))
diffservMapDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 34, 2, 1, 1), Integer32()).setMaxAccess("readonly")
diffservMapPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 34, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
diffservPortTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 34, 3), )
diffservPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 34, 3, 1), ).setIndexNames((0, "BRIDGE-MIB", "dot1dBasePort"))
diffservPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 34, 3, 1, 1), EnabledStatus()).setMaxAccess("readwrite")
routerRipState = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 35, 1), EnabledStatus()).setMaxAccess("readwrite")
routerIgmpState = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 35, 2), EnabledStatus()).setMaxAccess("readwrite")
routerDvmrpState = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 35, 3), EnabledStatus()).setMaxAccess("readwrite")
routerDvmrpThreshold = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 35, 4), Integer32()).setMaxAccess("readwrite")
loadSharing = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 35, 5), EnabledStatus()).setMaxAccess("readwrite")
loadSharingCriteria = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 35, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2,))).clone(namedValues=NamedValues(("src-ip", 1), ("src-dst-ip", 2),))).setMaxAccess("readwrite")
loadSharingAgingTime = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 35, 7), Integer32()).setMaxAccess("readwrite")
loadSharingDiscoverTime = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 35, 8), Integer32()).setMaxAccess("readwrite")
routerRipDistance = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 35, 9), Integer32()).setMaxAccess("readwrite")
routerDomainTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 38, 1), )
routerDomainEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 38, 1, 1), ).setIndexNames((0, "ZYXEL-XGS4728F-MIB", "routerDomainIpAddress"), (0, "ZYXEL-XGS4728F-MIB", "routerDomainIpMaskBits"))
routerDomainIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 38, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
routerDomainIpMaskBits = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 38, 1, 1, 2), Integer32()).setMaxAccess("readonly")
routerDomainVid = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 38, 1, 1, 3), Integer32()).setMaxAccess("readonly")
routerDomainIpTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 38, 2), )
routerDomainIpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 38, 2, 1), ).setIndexNames((0, "ZYXEL-XGS4728F-MIB", "routerDomainIpAddress"), (0, "ZYXEL-XGS4728F-MIB", "routerDomainIpMaskBits"))
routerDomainIpRipDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 38, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3,))).clone(namedValues=NamedValues(("none", 0), ("outgoing", 1), ("incoming", 2), ("both", 3),))).setMaxAccess("readwrite")
routerDomainIpRipVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 38, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2,))).clone(namedValues=NamedValues(("v1", 0), ("v2b", 1), ("v2m", 2),))).setMaxAccess("readwrite")
routerDomainIpIgmpVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 38, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3,))).clone(namedValues=NamedValues(("none", 0), ("igmp-v1", 1), ("igmp-v2", 2), ("igmp-v3", 3),))).setMaxAccess("readwrite")
routerDomainIpDvmrp = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 38, 2, 1, 4), EnabledStatus()).setMaxAccess("readwrite")
routerVrrpMaxNumber = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 36, 1), Integer32()).setMaxAccess("readonly")
routerVrrpTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 36, 2), )
routerVrrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 36, 2, 1), ).setIndexNames((0, "ZYXEL-XGS4728F-MIB", "routerDomainIpAddress"), (0, "ZYXEL-XGS4728F-MIB", "routerDomainIpMaskBits"), (0, "ZYXEL-XGS4728F-MIB", "routerVrrpVirtualID"), (0, "ZYXEL-XGS4728F-MIB", "routerVrrpUplinkGateway"))
routerVrrpVirtualID = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 36, 2, 1, 1), Integer32()).setMaxAccess("readonly")
routerVrrpUplinkGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 36, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
routerVrrpPreempt = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 36, 2, 1, 3), EnabledStatus()).setMaxAccess("readwrite")
routerVrrpInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 36, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
routerVrrpPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 36, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
routerVrrpPrimaryVirtualIP = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 36, 2, 1, 6), IpAddress()).setMaxAccess("readwrite")
routerVrrpName = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 36, 2, 1, 7), DisplayString()).setMaxAccess("readwrite")
routerVrrpSecondaryVirtualIP = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 36, 2, 1, 8), IpAddress()).setMaxAccess("readwrite")
rpVrrpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 36, 2, 1, 9), RowStatus()).setMaxAccess("readcreate")
routerVrrpDomainTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 36, 3), )
routerVrrpDomainEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 36, 3, 1), ).setIndexNames((0, "ZYXEL-XGS4728F-MIB", "routerDomainIpAddress"), (0, "ZYXEL-XGS4728F-MIB", "routerDomainIpMaskBits"))
routerVrrpAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 36, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1,))).clone(namedValues=NamedValues(("none", 0), ("simple", 1),))).setMaxAccess("readwrite")
routerVrrpAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 36, 3, 1, 2), DisplayString()).setMaxAccess("readwrite")
routerVrrpStatusTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 37, 1), )
routerVrrpStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 37, 1, 1), ).setIndexNames((0, "ZYXEL-XGS4728F-MIB", "routerVrrpStatusIpAddress"), (0, "ZYXEL-XGS4728F-MIB", "routerVrrpStatusIpMaskBits"), (0, "ZYXEL-XGS4728F-MIB", "routerVrrpStatusVirtualID"))
routerVrrpStatusIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 37, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
routerVrrpStatusIpMaskBits = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 37, 1, 1, 2), Integer32()).setMaxAccess("readonly")
routerVrrpStatusVirtualID = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 37, 1, 1, 3), Integer32()).setMaxAccess("readonly")
routerVrrpStatusVRStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 37, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
routerVrrpStatusUpLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 37, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
ipStatusTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 39, 1), )
ipStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 39, 1, 1), ).setIndexNames((0, "ZYXEL-XGS4728F-MIB", "ipStatusIPAddress"), (0, "ZYXEL-XGS4728F-MIB", "ipStatusVid"))
ipStatusIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 39, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
ipStatusVid = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 39, 1, 1, 2), Integer32()).setMaxAccess("readonly")
ipStatusPort = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 39, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
ipStatusType = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 39, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2,))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2),))).setMaxAccess("readonly")
ospfInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 41, 1), )
ospfInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 41, 1, 1), ).setIndexNames((0, "OSPF-MIB", "ospfIfIpAddress"), (0, "OSPF-MIB", "ospfAddressLessIf"))
ospfIfKeyId = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 41, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
ospfIfMaskbits = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 41, 1, 1, 2), Integer32()).setMaxAccess("readonly")
ospfIfDesignatedRouterID = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 41, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
ospfIfBackupDesignatedRouterID = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 41, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
ospfIfNbrCount = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 41, 1, 1, 5), Integer32()).setMaxAccess("readonly")
ospfIfAdjacentNbrCount = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 41, 1, 1, 6), Integer32()).setMaxAccess("readonly")
ospfIfHelloDueTime = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 41, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
ospfAreaExtTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 41, 2), )
ospfAreaExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 41, 2, 1), ).setIndexNames((0, "OSPF-MIB", "ospfAreaId"))
ospfAreaExtName = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 41, 2, 1, 1), DisplayString()).setMaxAccess("readwrite")
ospfRedistributeRouteTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 41, 3), )
ospfRedistributeRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 41, 3, 1), ).setIndexNames((0, "ZYXEL-XGS4728F-MIB", "ospfRedistributeRouteProtocol"))
ospfRedistributeRouteProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 41, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2,))).clone(namedValues=NamedValues(("rip", 1), ("static", 2),))).setMaxAccess("readonly")
ospfRedistributeRouteState = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 41, 3, 1, 2), EnabledStatus()).setMaxAccess("readwrite")
ospfRedistributeRouteType = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 41, 3, 1, 3), Integer32()).setMaxAccess("readwrite")
ospfRedistributeRouteMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 41, 3, 1, 4), Integer32()).setMaxAccess("readwrite")
ospfNbrExtTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 41, 4), )
ospfNbrExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 41, 4, 1), ).setIndexNames((0, "OSPF-MIB", "ospfNbrIpAddr"), (0, "OSPF-MIB", "ospfNbrAddressLessIndex"))
ospfNbrExtRole = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 41, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3,))).clone(namedValues=NamedValues(("dr", 1), ("backup", 2), ("dr-other", 3),))).setMaxAccess("readonly")
ospfNbrExtDeadtime = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 41, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
ospfNbrExtInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 41, 4, 1, 3), IpAddress()).setMaxAccess("readonly")
ospfNbrExtRXmtL = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 41, 4, 1, 4), Integer32()).setMaxAccess("readonly")
ospfNbrExtRqstL = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 41, 4, 1, 5), Integer32()).setMaxAccess("readonly")
ospfNbrExtDBsmL = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 41, 4, 1, 6), Integer32()).setMaxAccess("readonly")
ospfLsdbExtTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 41, 5), )
ospfLsdbExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 41, 5, 1), ).setIndexNames((0, "OSPF-MIB", "ospfLsdbAreaId"), (0, "OSPF-MIB", "ospfLsdbType"), (0, "OSPF-MIB", "ospfLsdbLsid"), (0, "OSPF-MIB", "ospfLsdbRouterId"))
ospfLsdbExtLinkCount = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 41, 5, 1, 1), Integer32()).setMaxAccess("readonly")
ospfLsdbExtRouteAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 41, 5, 1, 2), IpAddress()).setMaxAccess("readonly")
ospfLsdbExtRouteMaskbits = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 41, 5, 1, 3), Integer32()).setMaxAccess("readonly")
ospfVirtualLinkTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 41, 6), )
ospfVirtualLinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 41, 6, 1), ).setIndexNames((0, "OSPF-MIB", "ospfVirtIfAreaId"), (0, "OSPF-MIB", "ospfVirtIfNeighbor"))
ospfVirtualLinkName = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 41, 6, 1, 1), DisplayString()).setMaxAccess("readwrite")
ospfVirtualLinkKeyId = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 41, 6, 1, 2), Integer32()).setMaxAccess("readwrite")
ospfSummaryAddrTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 41, 7), )
ospfSummaryAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 41, 7, 1), ).setIndexNames((0, "ZYXEL-XGS4728F-MIB", "ospfSummaryAddress"), (0, "ZYXEL-XGS4728F-MIB", "ospfSummaryAddrMaskBit"))
ospfSummaryAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 41, 7, 1, 1), IpAddress()).setMaxAccess("readonly")
ospfSummaryAddrMaskBit = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 41, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,32))).setMaxAccess("readonly")
ospfSummaryAddrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 41, 7, 1, 3), RowStatus()).setMaxAccess("readcreate")
ospfGeneralExtGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 41, 8))
ospfDistance = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 41, 8, 1), Integer32()).setMaxAccess("readwrite")
mrstpSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 42, 1))
mrstpBridgeTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 42, 1, 1), )
mrstpBridgeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 42, 1, 1, 1), ).setIndexNames((0, "ZYXEL-XGS4728F-MIB", "mrstpBridgeIndex"))
mrstpBridgeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 42, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
mrstpState = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 42, 1, 1, 1, 2), EnabledStatus()).setMaxAccess("readwrite")
mrstpProtocolSpecification = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 42, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3,))).clone(namedValues=NamedValues(("unknown", 1), ("decLb100", 2), ("ieee8021d", 3),))).setMaxAccess("readonly")
mrstpPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 42, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,65535))).setMaxAccess("readwrite")
mrstpTimeSinceTopologyChange = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 42, 1, 1, 1, 5), TimeTicks()).setMaxAccess("readonly")
mrstpTopChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 42, 1, 1, 1, 6), Counter32()).setMaxAccess("readonly")
mrstpDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 42, 1, 1, 1, 7), BridgeId()).setMaxAccess("readonly")
mrstpRootCost = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 42, 1, 1, 1, 8), Integer32()).setMaxAccess("readonly")
mrstpRootPort = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 42, 1, 1, 1, 9), Integer32()).setMaxAccess("readonly")
mrstpMaxAge = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 42, 1, 1, 1, 10), Timeout()).setMaxAccess("readonly")
mrstpHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 42, 1, 1, 1, 11), Timeout()).setMaxAccess("readonly")
mrstpHoldTime = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 42, 1, 1, 1, 12), Integer32()).setMaxAccess("readonly")
mrstpForwardDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 42, 1, 1, 1, 13), Timeout()).setMaxAccess("readonly")
mrstpBridgeMaxAge = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 42, 1, 1, 1, 14), Timeout().subtype(subtypeSpec=ValueRangeConstraint(600,4000))).setMaxAccess("readwrite")
mrstpBridgeHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 42, 1, 1, 1, 15), Timeout().subtype(subtypeSpec=ValueRangeConstraint(100,1000))).setMaxAccess("readwrite")
mrstpBridgeForwardDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 42, 1, 1, 1, 16), Timeout().subtype(subtypeSpec=ValueRangeConstraint(400,3000))).setMaxAccess("readwrite")
mrstpPortTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 42, 1, 2), )
mrstpPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 42, 1, 2, 1), ).setIndexNames((0, "ZYXEL-XGS4728F-MIB", "mrstpPort"))
mrstpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 42, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,65535))).setMaxAccess("readonly")
mrstpPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 42, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,255))).setMaxAccess("readwrite")
mrstpPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 42, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6,))).clone(namedValues=NamedValues(("disabled", 1), ("blocking", 2), ("listening", 3), ("learning", 4), ("forwarding", 5), ("broken", 6),))).setMaxAccess("readonly")
mrstpPortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 42, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2,))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2),))).setMaxAccess("readwrite")
mrstpPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 42, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,65535))).setMaxAccess("readwrite")
mrstpPortDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 42, 1, 2, 1, 6), BridgeId()).setMaxAccess("readonly")
mrstpPortDesignatedCost = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 42, 1, 2, 1, 7), Integer32()).setMaxAccess("readonly")
mrstpPortDesignatedBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 42, 1, 2, 1, 8), BridgeId()).setMaxAccess("readonly")
mrstpPortDesignatedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 42, 1, 2, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2,2)).setFixedLength(2)).setMaxAccess("readonly")
mrstpPortForwardTransitions = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 42, 1, 2, 1, 10), Counter32()).setMaxAccess("readonly")
mrstpPortOnBridgeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 42, 1, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
mrstpPortAdminEdgePort = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 42, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2,))).clone(namedValues=NamedValues(("true", 1), ("false", 2),))).setMaxAccess("readwrite")
mrstpPortOperEdgePort = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 42, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2,))).clone(namedValues=NamedValues(("true", 1), ("false", 2),))).setMaxAccess("readonly")
mrstpNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 42, 2))
mrstpNewRoot = NotificationType((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 42, 2, 1)).setObjects(*(("ZYXEL-XGS4728F-MIB", "mrstpBridgeIndex"),))
mrstpTopologyChange = NotificationType((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 42, 2, 2)).setObjects(*(("ZYXEL-XGS4728F-MIB", "mrstpBridgeIndex"),))
dhcpSnpVlanTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 100, 1), )
dhcpSnpVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 100, 1, 1), ).setIndexNames((0, "ZYXEL-XGS4728F-MIB", "dhcpSnpVlanEntryVid"))
dhcpSnpVlanEntryVid = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 100, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,4094))).setMaxAccess("readonly")
dhcpSnpVlanEntryEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 100, 1, 1, 2), EnabledStatus()).setMaxAccess("readwrite")
dhcpSnpVlanEntryOption82Enable = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 100, 1, 1, 3), EnabledStatus()).setMaxAccess("readwrite")
dhcpSnpVlanEntryInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 100, 1, 1, 4), EnabledStatus()).setMaxAccess("readwrite")
dhcpSnpPortTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 100, 2), )
dhcpSnpPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 100, 2, 1), ).setIndexNames((0, "ZYXEL-XGS4728F-MIB", "dhcpSnpPortEntryPort"))
dhcpSnpPortEntryPort = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 100, 2, 1, 1), Integer32()).setMaxAccess("readonly")
dhcpSnpPortEntryTrust = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 100, 2, 1, 2), EnabledStatus()).setMaxAccess("readwrite")
dhcpSnpPortEntryRate = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 100, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,2048))).setMaxAccess("readwrite")
dhcpSnpBindTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 100, 3), )
dhcpSnpBindEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 100, 3, 1), ).setIndexNames((0, "ZYXEL-XGS4728F-MIB", "dhcpSnpBindEntryMac"), (0, "ZYXEL-XGS4728F-MIB", "dhcpSnpBindEntryVid"))
dhcpSnpBindEntryMac = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 100, 3, 1, 1), MacAddress()).setMaxAccess("readonly")
dhcpSnpBindEntryVid = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 100, 3, 1, 2), Integer32()).setMaxAccess("readonly")
dhcpSnpBindEntryIP = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 100, 3, 1, 3), IpAddress()).setMaxAccess("readonly")
dhcpSnpBindEntryLease = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 100, 3, 1, 4), Integer32()).setMaxAccess("readonly")
dhcpSnpBindEntryType = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 100, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2,))).clone(namedValues=NamedValues(("dynamic", 2),))).setMaxAccess("readonly")
dhcpSnpBindEntryPort = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 100, 3, 1, 6), Integer32()).setMaxAccess("readonly")
dhcpSnpEnable = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 100, 4), EnabledStatus()).setMaxAccess("readwrite")
dhcpSnpDb = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 100, 5))
dhcpSnpDbAbort = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 100, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,65535))).setMaxAccess("readwrite")
dhcpSnpDbWriteDelay = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 100, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,65535))).setMaxAccess("readwrite")
dhcpSnpDbUrl = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 100, 5, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,255))).setMaxAccess("readwrite")
dhcpSnpDbUrlRenew = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 100, 5, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,255))).setMaxAccess("readwrite")
dhcpSnpDbStat = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 100, 5, 5))
dhcpSnpDbStatClear = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 100, 5, 5, 1), EnabledStatus()).setMaxAccess("readwrite")
dhcpSnpDbStatAgentRunning = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 100, 5, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2,))).clone(namedValues=NamedValues(("none", 0), ("read", 1), ("write", 2),))).setMaxAccess("readonly")
dhcpSnpDbStatDelayExpiry = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 100, 5, 5, 3), Integer32()).setMaxAccess("readonly")
dhcpSnpDbStatAbortExpiry = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 100, 5, 5, 4), Integer32()).setMaxAccess("readonly")
dhcpSnpDbStatLastSuccTime = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 100, 5, 5, 5), DisplayString()).setMaxAccess("readonly")
dhcpSnpDbStatLastFailTime = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 100, 5, 5, 6), DisplayString()).setMaxAccess("readonly")
dhcpSnpDbStatLastFailReason = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 100, 5, 5, 7), DisplayString()).setMaxAccess("readonly")
dhcpSnpDbStatTotalAttempt = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 100, 5, 5, 8), Integer32()).setMaxAccess("readonly")
dhcpSnpDbStatStartupFail = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 100, 5, 5, 9), Integer32()).setMaxAccess("readonly")
dhcpSnpDbStatSuccTrans = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 100, 5, 5, 10), Integer32()).setMaxAccess("readonly")
dhcpSnpDbStatFailTrans = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 100, 5, 5, 11), Integer32()).setMaxAccess("readonly")
dhcpSnpDbStatSuccRead = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 100, 5, 5, 12), Integer32()).setMaxAccess("readonly")
dhcpSnpDbStatFailRead = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 100, 5, 5, 13), Integer32()).setMaxAccess("readonly")
dhcpSnpDbStatSuccWrite = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 100, 5, 5, 14), Integer32()).setMaxAccess("readonly")
dhcpSnpDbStatFailWrite = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 100, 5, 5, 15), Integer32()).setMaxAccess("readonly")
dhcpSnpDbStatFirstSuccAccess = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 100, 5, 5, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2,))).clone(namedValues=NamedValues(("none", 0), ("read", 1), ("write", 2),))).setMaxAccess("readonly")
dhcpSnpDbStatLastIgnoreBindCol = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 100, 5, 5, 17), Integer32()).setMaxAccess("readonly")
dhcpSnpDbStatLastIgnoreExpireLease = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 100, 5, 5, 18), Integer32()).setMaxAccess("readonly")
dhcpSnpDbStatLastIgnoreInvalidIntf = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 100, 5, 5, 19), Integer32()).setMaxAccess("readonly")
dhcpSnpDbStatLastIgnoreUnsuppVlan = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 100, 5, 5, 20), Integer32()).setMaxAccess("readonly")
dhcpSnpDbStatLastIgnoreParse = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 100, 5, 5, 21), Integer32()).setMaxAccess("readonly")
dhcpSnpDbStatTotalIgnoreBindCol = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 100, 5, 5, 22), Integer32()).setMaxAccess("readonly")
dhcpSnpDbStatTotalIgnoreExpireLease = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 100, 5, 5, 23), Integer32()).setMaxAccess("readonly")
dhcpSnpDbStatTotalIgnoreInvalidIntf = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 100, 5, 5, 24), Integer32()).setMaxAccess("readonly")
dhcpSnpDbStatTotalIgnoreUnsuppVlan = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 100, 5, 5, 25), Integer32()).setMaxAccess("readonly")
dhcpSnpDbStatTotalIgnoreParse = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 100, 5, 5, 26), Integer32()).setMaxAccess("readonly")
dhcpSnpDbStatFirstSuccessAccess = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 100, 5, 5, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2,))).clone(namedValues=NamedValues(("none", 0), ("read", 1), ("write", 2),))).setMaxAccess("readonly")
dhcpSnpDhcpVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 100, 6))
dhcpSnpDhcpVlanVid = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 100, 6, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,4094))).setMaxAccess("readwrite")
ipsgTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 101, 1), )
ipsgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 101, 1, 1), ).setIndexNames((0, "ZYXEL-XGS4728F-MIB", "ipsgEntryMac"), (0, "ZYXEL-XGS4728F-MIB", "ipsgEntryVid"))
ipsgEntryMac = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 101, 1, 1, 1), MacAddress()).setMaxAccess("readonly")
ipsgEntryVid = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 101, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,4094))).setMaxAccess("readonly")
ipsgEntryIp = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 101, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
ipsgEntryLease = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 101, 1, 1, 4), Integer32()).setMaxAccess("readonly")
ipsgEntryType = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 101, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2,))).clone(namedValues=NamedValues(("static", 1), ("dhcp", 2),))).setMaxAccess("readonly")
ipsgEntryPort = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 101, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
ipsgEntryState = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 101, 1, 1, 7), RowStatus()).setMaxAccess("readcreate")
arpInspectSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 102, 1))
arpInspectState = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 102, 1, 1), EnabledStatus()).setMaxAccess("readwrite")
arpInspectFilterAgingTime = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 102, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,2147483647))).setMaxAccess("readwrite")
arpInspectLog = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 102, 1, 3))
arpInspectLogEntries = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 102, 1, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,1024))).setMaxAccess("readwrite")
arpInspectLogRate = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 102, 1, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,1024))).setMaxAccess("readwrite")
arpInspectLogInterval = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 102, 1, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,2147483647))).setMaxAccess("readwrite")
arpInspectVlanTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 102, 1, 4), )
arpInspectVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 102, 1, 4, 1), ).setIndexNames((0, "ZYXEL-XGS4728F-MIB", "arpInspectVlanVid"))
arpInspectVlanVid = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 102, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,4094))).setMaxAccess("readonly")
arpInspectVlanLog = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 102, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4,))).clone(namedValues=NamedValues(("all", 1), ("none", 2), ("permit", 3), ("deny", 4),))).setMaxAccess("readwrite")
arpInspectVlanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 102, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2,))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2),))).setMaxAccess("readwrite")
arpInspectPortTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 102, 1, 5), )
arpInspectPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 102, 1, 5, 1), ).setIndexNames((0, "ZYXEL-XGS4728F-MIB", "arpInspectPortIndex"))
arpInspectPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 102, 1, 5, 1, 1), Integer32()).setMaxAccess("readonly")
arpInspectPortTrust = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 102, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2,))).clone(namedValues=NamedValues(("trusted", 1), ("untrusted", 2),))).setMaxAccess("readwrite")
arpInspectPortRate = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 102, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,2048))).setMaxAccess("readwrite")
arpInspectPortInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 102, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,15))).setMaxAccess("readwrite")
arpInspectStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 102, 2))
arpInspectFilterClear = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 102, 2, 1), EnabledStatus()).setMaxAccess("readwrite")
arpInspectLogClear = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 102, 2, 2), EnabledStatus()).setMaxAccess("readwrite")
arpInspectFilterTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 102, 2, 3), )
arpInspectFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 102, 2, 3, 1), ).setIndexNames((0, "ZYXEL-XGS4728F-MIB", "arpInspectFilterMac"), (0, "ZYXEL-XGS4728F-MIB", "arpInspectFilterVid"))
arpInspectFilterMac = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 102, 2, 3, 1, 1), MacAddress()).setMaxAccess("readonly")
arpInspectFilterVid = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 102, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,4094))).setMaxAccess("readonly")
arpInspectFilterPort = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 102, 2, 3, 1, 3), Integer32()).setMaxAccess("readonly")
arpInspectFilterExpiry = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 102, 2, 3, 1, 4), Integer32()).setMaxAccess("readonly")
arpInspectFilterReason = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 102, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3,))).clone(namedValues=NamedValues(("macVid", 1), ("port", 2), ("ip", 3),))).setMaxAccess("readonly")
arpInspectFilterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 102, 2, 3, 1, 6), RowStatus()).setMaxAccess("readcreate")
arpInspectLogTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 102, 2, 4), )
arpInspectLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 102, 2, 4, 1), ).setIndexNames((0, "ZYXEL-XGS4728F-MIB", "arpInspectLogMac"), (0, "ZYXEL-XGS4728F-MIB", "arpInspectLogVid"), (0, "ZYXEL-XGS4728F-MIB", "arpInspectLogPort"), (0, "ZYXEL-XGS4728F-MIB", "arpInspectLogIp"), (0, "ZYXEL-XGS4728F-MIB", "arpInspectLogReason"))
arpInspectLogMac = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 102, 2, 4, 1, 1), MacAddress()).setMaxAccess("readonly")
arpInspectLogVid = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 102, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,4094))).setMaxAccess("readonly")
arpInspectLogPort = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 102, 2, 4, 1, 3), Integer32()).setMaxAccess("readonly")
arpInspectLogIp = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 102, 2, 4, 1, 4), IpAddress()).setMaxAccess("readonly")
arpInspectLogNumPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 102, 2, 4, 1, 5), Integer32()).setMaxAccess("readonly")
arpInspectLogReason = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 102, 2, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5,))).clone(namedValues=NamedValues(("deny", 1), ("denyStatic", 2), ("denyDHCP", 3), ("permitStatic", 4), ("permitDHCP", 5),))).setMaxAccess("readonly")
arpInspectLogTime = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 102, 2, 4, 1, 7), DateAndTime()).setMaxAccess("readonly")
arpInspectStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 102, 2, 5), )
arpInspectStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 102, 2, 5, 1), ).setIndexNames((0, "ZYXEL-XGS4728F-MIB", "arpInspectStatisticsVid"))
arpInspectStatisticsVid = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 102, 2, 5, 1, 1), Integer32()).setMaxAccess("readonly")
arpInspectStatisticsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 102, 2, 5, 1, 2), Counter32()).setMaxAccess("readonly")
arpInspectStatisticsRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 102, 2, 5, 1, 3), Counter32()).setMaxAccess("readonly")
arpInspectStatisticsReply = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 102, 2, 5, 1, 4), Counter32()).setMaxAccess("readonly")
arpInspectStatisticsForward = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 102, 2, 5, 1, 5), Counter32()).setMaxAccess("readonly")
arpInspectStatisticsDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 102, 2, 5, 1, 6), Counter32()).setMaxAccess("readonly")
arpInspectStatisticsClear = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 102, 2, 5, 1, 7), EnabledStatus()).setMaxAccess("readwrite")
trTCMState = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 103, 1), EnabledStatus()).setMaxAccess("readwrite")
trTCMMode = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 103, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1,))).clone(namedValues=NamedValues(("color-aware", 0), ("color-blind", 1),))).setMaxAccess("readwrite")
trTCMPortTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 103, 3), )
trTCMPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 103, 3, 1), ).setIndexNames((0, "BRIDGE-MIB", "dot1dBasePort"))
trTCMPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 103, 3, 1, 1), EnabledStatus()).setMaxAccess("readcreate")
trTCMPortCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 103, 3, 1, 2), Integer32()).setMaxAccess("readwrite")
trTCMPortPIR = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 103, 3, 1, 3), Integer32()).setMaxAccess("readwrite")
trTCMPortDscpGreen = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 103, 3, 1, 4), Integer32()).setMaxAccess("readwrite")
trTCMPortDscpYellow = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 103, 3, 1, 5), Integer32()).setMaxAccess("readwrite")
trTCMPortDscpRed = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 103, 3, 1, 6), Integer32()).setMaxAccess("readwrite")
loopGuardState = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 104, 1), EnabledStatus()).setMaxAccess("readwrite")
loopGuardPortTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 104, 2), )
loopGuardPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 104, 2, 1), ).setIndexNames((0, "BRIDGE-MIB", "dot1dBasePort"))
loopGuardPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 104, 2, 1, 1), EnabledStatus()).setMaxAccess("readwrite")
subnetBasedVlanState = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 105, 1), EnabledStatus()).setMaxAccess("readwrite")
dhcpVlanOverrideState = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 105, 2), EnabledStatus()).setMaxAccess("readwrite")
subnetBasedVlanTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 105, 3), )
subnetBasedVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 105, 3, 1), ).setIndexNames((0, "ZYXEL-XGS4728F-MIB", "subnetBasedVlanSrcIp"), (0, "ZYXEL-XGS4728F-MIB", "subnetBasedVlanSrcMaskBit"))
subnetBasedVlanSrcIp = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 105, 3, 1, 1), IpAddress()).setMaxAccess("readonly")
subnetBasedVlanSrcMaskBit = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 105, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,32))).setMaxAccess("readonly")
subnetBasedVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 105, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,32))).setMaxAccess("readwrite")
subnetBasedVlanVid = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 105, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,4094))).setMaxAccess("readwrite")
subnetBasedVlanPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 105, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,7))).setMaxAccess("readwrite")
subnetBasedVlanEntryState = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 105, 3, 1, 6), RowStatus()).setMaxAccess("readcreate")
macAuthenticationState = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 106, 1), EnabledStatus()).setMaxAccess("readwrite")
macAuthenticationNamePrefix = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 106, 2), DisplayString()).setMaxAccess("readwrite")
macAuthenticationPassword = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 106, 3), DisplayString()).setMaxAccess("readwrite")
macAuthenticationTimeout = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 106, 4), Integer32()).setMaxAccess("readwrite")
macAuthenticationPortTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 106, 5), )
macAuthenticationPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 106, 5, 1), ).setIndexNames((0, "BRIDGE-MIB", "dot1dBasePort"))
macAuthenticationPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 106, 5, 1, 1), EnabledStatus()).setMaxAccess("readwrite")
class MstiOrCistInstanceIndex(Integer32, TextualConvention):
    subtypeSpec = Integer32.subtypeSpec+ValueRangeConstraint(0,16)

mstpGen = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 107, 1))
mstpGenState = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 107, 1, 1), EnabledStatus()).setMaxAccess("readwrite")
mstpGenCfgIdName = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 107, 1, 2), DisplayString()).setMaxAccess("readwrite")
mstpGenCfgIdRevLevel = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 107, 1, 3), Integer32()).setMaxAccess("readwrite")
mstpGenCfgIdCfgDigest = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 107, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16,16)).setFixedLength(16)).setMaxAccess("readonly")
mstpGenHelloTime = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 107, 1, 5), Timeout().subtype(subtypeSpec=ValueRangeConstraint(1,10))).setMaxAccess("readwrite")
mstpGenMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 107, 1, 6), Timeout().subtype(subtypeSpec=ValueRangeConstraint(6,40))).setMaxAccess("readwrite")
mstpGenForwardDelay = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 107, 1, 7), Timeout().subtype(subtypeSpec=ValueRangeConstraint(4,30))).setMaxAccess("readwrite")
mstpGenMaxHops = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 107, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,255))).setMaxAccess("readwrite")
mstpGenCistRootPathCost = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 107, 1, 9), Integer32()).setMaxAccess("readonly")
mstpGenCistRootBrid = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 107, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8,8)).setFixedLength(8)).setMaxAccess("readonly")
mstMapTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 107, 20), )
mstMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 107, 20, 1), ).setIndexNames((0, "ZYXEL-XGS4728F-MIB", "mstMapIndex"))
mstMapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 107, 20, 1, 1), MstiOrCistInstanceIndex())
mstMapVlans1k = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 107, 20, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0,128))).setMaxAccess("readwrite")
mstMapVlans2k = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 107, 20, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0,128))).setMaxAccess("readwrite")
mstMapVlans3k = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 107, 20, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0,128))).setMaxAccess("readwrite")
mstMapVlans4k = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 107, 20, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0,128))).setMaxAccess("readwrite")
mstMapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 107, 20, 1, 6), RowStatus()).setMaxAccess("readcreate")
mstVlanTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 107, 30), )
mstVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 107, 30, 1), ).setIndexNames((0, "ZYXEL-XGS4728F-MIB", "mstVlanIndex"))
mstVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 107, 30, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,4094)))
mstVlanMstIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 107, 30, 1, 2), MstiOrCistInstanceIndex()).setMaxAccess("readonly")
mstpPortTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 107, 40), )
mstpPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 107, 40, 1), ).setIndexNames((0, "ZYXEL-XGS4728F-MIB", "mstpPortIndex"))
mstpPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 107, 40, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,65535)))
mstpPortOperEdgePort = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 107, 40, 1, 2), TruthValue()).setMaxAccess("readonly")
mstpPortOperPointToPointMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 107, 40, 1, 3), TruthValue()).setMaxAccess("readonly")
mstpPortAdminEdgePort = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 107, 40, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2,))).clone(namedValues=NamedValues(("true", 1), ("false", 2),))).setMaxAccess("readwrite")
mstpXstTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 107, 50), )
mstpXstEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 107, 50, 1), ).setIndexNames((0, "ZYXEL-XGS4728F-MIB", "mstpXstId"))
mstpXstId = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 107, 50, 1, 1), MstiOrCistInstanceIndex()).setMaxAccess("readonly")
mstpXstBridgePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 107, 50, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,61440)).clone(32768)).setMaxAccess("readwrite")
mstpXstBridgeId = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 107, 50, 1, 3), BridgeId()).setMaxAccess("readonly")
mstpXstInternalRootCost = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 107, 50, 1, 4), Integer32()).setMaxAccess("readonly")
mstpXstRootPort = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 107, 50, 1, 5), Integer32()).setMaxAccess("readonly")
mstpXstTimeSinceTopologyChange = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 107, 50, 1, 6), TimeTicks()).setMaxAccess("readonly")
mstpXstTopologyChangesCount = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 107, 50, 1, 7), Counter32()).setMaxAccess("readonly")
mstpXstPortTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 107, 60), )
mstpXstPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 107, 60, 1), ).setIndexNames((0, "ZYXEL-XGS4728F-MIB", "mstpXstPortXstId"), (0, "ZYXEL-XGS4728F-MIB", "mstpXstPortIndex"))
mstpXstPortXstId = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 107, 60, 1, 1), MstiOrCistInstanceIndex())
mstpXstPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 107, 60, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,65535))).setMaxAccess("readonly")
mstpXstPortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 107, 60, 1, 3), EnabledStatus()).setMaxAccess("readwrite")
mstpXstPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 107, 60, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,255)).clone(128)).setMaxAccess("readwrite")
mstpXstPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 107, 60, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,65535))).setMaxAccess("readwrite")
mstpXstPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 107, 60, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4,))).clone(namedValues=NamedValues(("disabled", 0), ("discarding", 1), ("learning", 2), ("forwarding", 3), ("unknown", 4),))).setMaxAccess("readonly")
mstpXstPortDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 107, 60, 1, 7), BridgeId()).setMaxAccess("readonly")
mstpXstPortDesignatedCost = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 107, 60, 1, 8), Integer32()).setMaxAccess("readonly")
mstpXstPortDesignatedBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 107, 60, 1, 9), BridgeId()).setMaxAccess("readonly")
mstpXstPortDesignatedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 107, 60, 1, 10), Integer32()).setMaxAccess("readonly")
mstpNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 107, 70))
mstpNewRoot = NotificationType((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 107, 70, 1)).setObjects(*(("ZYXEL-XGS4728F-MIB", "mstpXstId"),))
mstpTopologyChange = NotificationType((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 107, 70, 2)).setObjects(*(("ZYXEL-XGS4728F-MIB", "mstpXstId"),))
radiusAuthServerSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 108, 1))
radiusAuthServerMode = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 108, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2,))).clone(namedValues=NamedValues(("index-priority", 1), ("round-robin", 2),))).setMaxAccess("readwrite")
radiusAuthServerTimeout = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 108, 1, 2), Integer32()).setMaxAccess("readwrite")
radiusAuthServerTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 108, 1, 3), )
radiusAuthServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 108, 1, 3, 1), ).setIndexNames((0, "ZYXEL-XGS4728F-MIB", "radiusAuthServerIndex"))
radiusAuthServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 108, 1, 3, 1, 1), Integer32())
radiusAuthServerIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 108, 1, 3, 1, 2), IpAddress()).setMaxAccess("readwrite")
radiusAuthServerUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 108, 1, 3, 1, 3), Integer32()).setMaxAccess("readwrite")
radiusAuthServerSharedSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 108, 1, 3, 1, 4), DisplayString()).setMaxAccess("readwrite")
radiusAcctServerSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 108, 2))
radiusAcctServerTimeout = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 108, 2, 1), Integer32()).setMaxAccess("readwrite")
radiusAcctServerTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 108, 2, 2), )
radiusAcctServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 108, 2, 2, 1), ).setIndexNames((0, "ZYXEL-XGS4728F-MIB", "radiusAcctServerIndex"))
radiusAcctServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 108, 2, 2, 1, 1), Integer32())
radiusAcctServerIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 108, 2, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
radiusAcctServerUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 108, 2, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
radiusAcctServerSharedSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 108, 2, 2, 1, 4), DisplayString()).setMaxAccess("readwrite")
tacacsAuthServerSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 109, 1))
tacacsAuthServerMode = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 109, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2,))).clone(namedValues=NamedValues(("index-priority", 1), ("round-robin", 2),))).setMaxAccess("readwrite")
tacacsAuthServerTimeout = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 109, 1, 2), Integer32()).setMaxAccess("readwrite")
tacacsAuthServerTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 109, 1, 3), )
tacacsAuthServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 109, 1, 3, 1), ).setIndexNames((0, "ZYXEL-XGS4728F-MIB", "tacacsAuthServerIndex"))
tacacsAuthServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 109, 1, 3, 1, 1), Integer32())
tacacsAuthServerIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 109, 1, 3, 1, 2), IpAddress()).setMaxAccess("readwrite")
tacacsAuthServerTcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 109, 1, 3, 1, 3), Integer32()).setMaxAccess("readwrite")
tacacsAuthServerSharedSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 109, 1, 3, 1, 4), DisplayString()).setMaxAccess("readwrite")
tacacsAcctServerSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 109, 2))
tacacsAcctServerTimeout = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 109, 2, 1), Integer32()).setMaxAccess("readwrite")
tacacsAcctServerTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 109, 2, 2), )
tacacsAcctServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 109, 2, 2, 1), ).setIndexNames((0, "ZYXEL-XGS4728F-MIB", "tacacsAcctServerIndex"))
tacacsAcctServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 109, 2, 2, 1, 1), Integer32())
tacacsAcctServerIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 109, 2, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
tacacsAcctServerTcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 109, 2, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
tacacsAcctServerSharedSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 109, 2, 2, 1, 4), DisplayString()).setMaxAccess("readwrite")
authenticationSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 110, 1))
authenticationTypeTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 110, 1, 1), )
authenticationTypeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 110, 1, 1, 1), ).setIndexNames((0, "ZYXEL-XGS4728F-MIB", "authenticationTypeName"))
authenticationTypeName = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 110, 1, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
authenticationTypeMethodList = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 110, 1, 1, 1, 2), OctetString()).setMaxAccess("readwrite")
accountingSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 110, 2))
accountingUpdatePeriod = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 110, 2, 1), Integer32()).setMaxAccess("readwrite")
accountingTypeTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 110, 2, 2), )
accountingTypeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 110, 2, 2, 1), ).setIndexNames((0, "ZYXEL-XGS4728F-MIB", "accountingTypeName"))
accountingTypeName = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 110, 2, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
accountingTypeActive = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 110, 2, 2, 1, 2), EnabledStatus()).setMaxAccess("readwrite")
accountingTypeBroadcast = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 110, 2, 2, 1, 3), EnabledStatus()).setMaxAccess("readwrite")
accountingTypeMode = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 110, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(255, 1, 2,))).clone(namedValues=NamedValues(("not-available", 255), ("start-stop", 1), ("stop-only", 2),))).setMaxAccess("readwrite")
accountingTypeMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 110, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2,))).clone(namedValues=NamedValues(("radius", 1), ("tacacs", 2),))).setMaxAccess("readwrite")
accountingTypePrivilege = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 110, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(255, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,))).clone(namedValues=NamedValues(("not-available", 255), ("privilege-0", 0), ("privilege-1", 1), ("privilege-2", 2), ("privilege-3", 3), ("privilege-4", 4), ("privilege-5", 5), ("privilege-6", 6), ("privilege-7", 7), ("privilege-8", 8), ("privilege-9", 9), ("privilege-10", 10), ("privilege-11", 11), ("privilege-12", 12), ("privilege-13", 13), ("privilege-14", 14),))).setMaxAccess("readwrite")
authorizationSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 110, 3))
authorizationTypeTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 110, 3, 1), )
authorizationTypeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 110, 3, 1, 1), ).setIndexNames((0, "ZYXEL-XGS4728F-MIB", "authorizationTypeName"))
authorizationTypeName = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 110, 3, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
authorizationTypeActive = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 110, 3, 1, 1, 2), EnabledStatus()).setMaxAccess("readwrite")
authorizationTypeMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 110, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2,))).clone(namedValues=NamedValues(("radius", 1), ("tacacs", 2),))).setMaxAccess("readwrite")
portIsolationTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 112, 1), )
portIsolationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 112, 1, 1), ).setIndexNames((0, "BRIDGE-MIB", "dot1dBasePort"))
portIsolationState = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 112, 1, 1, 1), EnabledStatus()).setMaxAccess("readwrite")
l2ptState = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 115, 1), EnabledStatus()).setMaxAccess("readwrite")
l2ptMacAddr = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 115, 2), MacAddress()).setMaxAccess("readwrite")
l2ptTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 115, 3), )
l2ptEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 115, 3, 1), ).setIndexNames((0, "BRIDGE-MIB", "dot1dBasePort"))
l2ptProtocolGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 115, 3, 1, 1), Bits().clone(namedValues=NamedValues(("cdp", 0), ("stp", 1), ("vtp", 2),))).setMaxAccess("readwrite")
l2ptPointToPointProtocolGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 115, 3, 1, 2), Bits().clone(namedValues=NamedValues(("pagp", 0), ("lacp", 1), ("udld", 2),))).setMaxAccess("readwrite")
l2ptMode = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 115, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2,))).clone(namedValues=NamedValues(("access", 1), ("tunnel", 2),))).setMaxAccess("readwrite")
vlanMappingState = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 116, 1), EnabledStatus()).setMaxAccess("readwrite")
vlanMappingPortTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 116, 2), )
vlanMappingPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 116, 2, 1), ).setIndexNames((0, "BRIDGE-MIB", "dot1dBasePort"))
vlanMappingPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 116, 2, 1, 1), EnabledStatus()).setMaxAccess("readwrite")
vlanMappingRuleTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 116, 3), )
vlanMappingRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 116, 3, 1), ).setIndexNames((0, "ZYXEL-XGS4728F-MIB", "vlanMappingRulePort"), (0, "ZYXEL-XGS4728F-MIB", "vlanMappingRuleVid"))
vlanMappingRuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 116, 3, 1, 1), DisplayString()).setMaxAccess("readwrite")
vlanMappingRulePort = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 116, 3, 1, 2), Integer32()).setMaxAccess("readonly")
vlanMappingRuleVid = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 116, 3, 1, 3), Integer32()).setMaxAccess("readonly")
vlanMappingRuleTransVid = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 116, 3, 1, 4), Integer32()).setMaxAccess("readwrite")
vlanMappingRulePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 116, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7,))).clone(namedValues=NamedValues(("prioriry-0", 0), ("prioriry-1", 1), ("prioriry-2", 2), ("prioriry-3", 3), ("prioriry-4", 4), ("prioriry-5", 5), ("prioriry-6", 6), ("prioriry-7", 7),))).setMaxAccess("readwrite")
vlanMappingRuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 116, 3, 1, 6), RowStatus()).setMaxAccess("readcreate")
transceiverSerialInfoTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 117, 1), )
transceiverSerialInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 117, 1, 1), ).setIndexNames((0, "ZYXEL-XGS4728F-MIB", "transceiverSerialInfoEntryPort"))
transceiverSerialInfoEntryPort = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 117, 1, 1, 1), Integer32()).setMaxAccess("readonly")
transceiverSerialInfoEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 117, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3,))).clone(namedValues=NamedValues(("ok-with-DDM", 1), ("ok-without-DDM", 2), ("nonoperational", 3),))).setMaxAccess("readonly")
transceiverSerialInfoEntryVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 117, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
transceiverSerialInfoEntryPartNo = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 117, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
transceiverSerialInfoEntrySerialNo = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 117, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
transceiverSerialInfoEntryRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 117, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
transceiverSerialInfoEntryDateCode = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 117, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
transceiverSerialInfoEntryTransceiver = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 117, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
transceiverDdmInfoTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 117, 2), )
transceiverDdmInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 117, 2, 1), ).setIndexNames((0, "ZYXEL-XGS4728F-MIB", "transceiverDdmInfoEntryPort"), (0, "ZYXEL-XGS4728F-MIB", "transceiverDdmInfoEntryType"))
transceiverDdmInfoEntryPort = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 117, 2, 1, 1), Integer32()).setMaxAccess("readonly")
transceiverDdmInfoEntryType = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 117, 2, 1, 2), Integer32()).setMaxAccess("readonly")
transceiverDdmInfoEntryAlarmMax = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 117, 2, 1, 3), Integer32()).setMaxAccess("readonly")
transceiverDdmInfoEntryAlarmMin = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 117, 2, 1, 4), Integer32()).setMaxAccess("readonly")
transceiverDdmInfoEntryWarnMax = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 117, 2, 1, 5), Integer32()).setMaxAccess("readonly")
transceiverDdmInfoEntryWarnMin = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 117, 2, 1, 6), Integer32()).setMaxAccess("readonly")
transceiverDdmInfoEntryCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 117, 2, 1, 7), Integer32()).setMaxAccess("readonly")
transceiverDdmInfoEntryDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 117, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
dot3OamState = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 118, 1), EnabledStatus()).setMaxAccess("readwrite")
dot3OamPortTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 118, 2), )
dot3OamPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 118, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
dot3OamFunctionsSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 118, 2, 1, 1), Bits().clone(namedValues=NamedValues(("unidirectionalSupport", 0), ("loopbackSupport", 1), ("eventSupport", 2), ("variableSupport", 3),))).setMaxAccess("readwrite")
dot1agCfmMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 119, 1))
dot1agCfmMep = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 119, 1, 7))
zyswdot1agCfmMepTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 119, 1, 7, 1), )
zyswdot1agCfmMepEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 119, 1, 7, 1, 1), ).setIndexNames((0, "IEEE8021-CFM-MIB", "dot1agCfmMdIndex"), (0, "IEEE8021-CFM-MIB", "dot1agCfmMaIndex"), (0, "IEEE8021-CFM-MIB", "dot1agCfmMepIdentifier"))
zyswdot1agCfmMepTransmitLbmDataTlvSize = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 119, 1, 7, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0,1500))).setMaxAccess("readwrite")
vlanCounterTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 122, 1), )
vlanCounterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 122, 1, 1), ).setIndexNames((0, "ZYXEL-XGS4728F-MIB", "vlanCounterVlanID"))
vlanCounterVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 122, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1,4094))).setMaxAccess("readonly")
vlanCounterHCOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 122, 1, 1, 2), Counter64()).setUnits('Octets').setMaxAccess("readonly")
vlanCounterHCPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 122, 1, 1, 3), Counter64()).setMaxAccess("readonly")
vlanCounterHCMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 122, 1, 1, 4), Counter64()).setMaxAccess("readonly")
vlanCounterHCBroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 122, 1, 1, 5), Counter64()).setMaxAccess("readonly")
vlanCounterHCTaggedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 122, 1, 1, 6), Counter64()).setMaxAccess("readonly")
vlanCounterHCPkts64Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 122, 1, 1, 7), Counter64()).setMaxAccess("readonly")
vlanCounterHCPkts65to127Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 122, 1, 1, 8), Counter64()).setMaxAccess("readonly")
vlanCounterHCPkts128to255Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 122, 1, 1, 9), Counter64()).setMaxAccess("readonly")
vlanCounterHCPkts256to511Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 122, 1, 1, 10), Counter64()).setMaxAccess("readonly")
vlanCounterHCPkts512to1023Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 122, 1, 1, 11), Counter64()).setMaxAccess("readonly")
vlanCounterHCPkts1024to1518Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 122, 1, 1, 12), Counter64()).setMaxAccess("readonly")
vlanCounterHCOversizePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 122, 1, 1, 13), Counter64()).setMaxAccess("readonly")
vlanCounterTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 122, 1, 1, 14), Unsigned32()).setMaxAccess("readwrite")
vlanCounterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 122, 1, 1, 15), RowStatus()).setMaxAccess("readwrite")
vlanCounterPort = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 122, 1, 1, 16), PortList()).setMaxAccess("readwrite")
sysMemoryPoolTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 124, 1), )
sysMemoryPoolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 124, 1, 1), ).setIndexNames((0, "ZYXEL-XGS4728F-MIB", "sysMemoryPoolId"))
sysMemoryPoolId = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 124, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
sysMemoryPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 124, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0,32))).setMaxAccess("readonly")
sysMemoryPoolTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 124, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
sysMemoryPoolUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 124, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
sysMemoryPoolUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 124, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0,100))).setMaxAccess("readonly")
pppoeIaSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 125, 1))
pppoeIaState = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 125, 1, 1), EnabledStatus()).setMaxAccess("readwrite")
pppoeIaAccessNodeIdentifierString = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 125, 1, 2), DisplayString()).setMaxAccess("readwrite")
pppoeIaFlexibleCircuitIDSyntaxActive = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 125, 1, 3), EnabledStatus()).setMaxAccess("readwrite")
pppoeIaFlexibleCircuitIDSyntaxIdentifierString = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 125, 1, 4), DisplayString()).setMaxAccess("readwrite")
pppoeIaFlexibleCircuitIDSyntaxOption = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 125, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4,))).clone(namedValues=NamedValues(("sp", 1), ("sv", 2), ("pv", 3), ("spv", 4),))).setMaxAccess("readwrite")
pppoeIaFlexibleCircuitIDSyntaxDelimiter = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 125, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6,))).clone(namedValues=NamedValues(("pound-sign", 1), ("dot", 2), ("comma", 3), ("semicolon", 4), ("slash", 5), ("space", 6),))).setMaxAccess("readwrite")
pppoeIaPortTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 125, 1, 7), )
pppoeIaPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 125, 1, 7, 1), ).setIndexNames((0, "BRIDGE-MIB", "dot1dBasePort"))
pppoeIaPortEntryPort = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 125, 1, 7, 1, 1), Integer32()).setMaxAccess("readonly")
pppoeIaPortEntryTrust = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 125, 1, 7, 1, 2), EnabledStatus()).setMaxAccess("readwrite")
pppoeIaPortEntryCircuitIDString = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 125, 1, 7, 1, 3), DisplayString()).setMaxAccess("readwrite")
pppoeIaPortEntryRemoteIDString = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 125, 1, 7, 1, 4), DisplayString()).setMaxAccess("readwrite")
pppoeIaVlanTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 125, 1, 8), )
pppoeIaVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 125, 1, 8, 1), ).setIndexNames((0, "ZYXEL-XGS4728F-MIB", "pppoeIaVlanEntryVid"))
pppoeIaVlanEntryVid = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 125, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,4094))).setMaxAccess("readonly")
pppoeIaVlanEntryCircuitID = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 125, 1, 8, 1, 2), EnabledStatus()).setMaxAccess("readwrite")
pppoeIaVlanEntryRemoteID = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 125, 1, 8, 1, 3), EnabledStatus()).setMaxAccess("readwrite")
pppoeIaVlanEntryRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 125, 1, 8, 1, 4), RowStatus()).setMaxAccess("readcreate")
pppoeIaPortVlanTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 125, 1, 9), )
pppoeIaPortVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 125, 1, 9, 1), ).setIndexNames((0, "ZYXEL-XGS4728F-MIB", "pppoeIaPortVlanEntryPort"), (0, "ZYXEL-XGS4728F-MIB", "pppoeIaPortVlanEntryVid"))
pppoeIaPortVlanEntryPort = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 125, 1, 9, 1, 1), Integer32()).setMaxAccess("readonly")
pppoeIaPortVlanEntryVid = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 125, 1, 9, 1, 2), Integer32()).setMaxAccess("readonly")
pppoeIaPortVlanEntryCircuitIDString = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 125, 1, 9, 1, 3), DisplayString()).setMaxAccess("readwrite")
pppoeIaPortVlanEntryRemoteIDString = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 125, 1, 9, 1, 4), DisplayString()).setMaxAccess("readwrite")
pppoeIaPortVlanEntryRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 125, 1, 9, 1, 5), RowStatus()).setMaxAccess("readcreate")
arpLearningPortTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 126, 1), )
arpLearningPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 126, 1, 1), ).setIndexNames((0, "BRIDGE-MIB", "dot1dBasePort"))
arpLearningPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 126, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2,))).clone(namedValues=NamedValues(("arp-reply", 0), ("gratuitous-arp", 1), ("arp-request", 2),))).setMaxAccess("readwrite")
maxNumberOfStaticRoutes = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 127, 1), Integer32()).setMaxAccess("readonly")
staticRouteTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 127, 2), )
staticRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 127, 2, 1), ).setIndexNames((0, "ZYXEL-XGS4728F-MIB", "staticRouteIp"), (0, "ZYXEL-XGS4728F-MIB", "staticRouteMask"), (0, "ZYXEL-XGS4728F-MIB", "staticRouteGateway"))
staticRouteName = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 127, 2, 1, 1), DisplayString()).setMaxAccess("readwrite")
staticRouteIp = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 127, 2, 1, 2), IpAddress())
staticRouteMask = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 127, 2, 1, 3), IpAddress())
staticRouteGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 127, 2, 1, 4), IpAddress())
staticRouteMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 127, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
staticRouteRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 127, 2, 1, 6), RowStatus()).setMaxAccess("readcreate")
routingStatusTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 128, 1), )
routingStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 128, 1, 1), ).setIndexNames((0, "ZYXEL-XGS4728F-MIB", "routingStatusDestAddress"), (0, "ZYXEL-XGS4728F-MIB", "routingStatusDestMaskbits"), (0, "ZYXEL-XGS4728F-MIB", "routingStatusGateway"))
routingStatusDestAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 128, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
routingStatusDestMaskbits = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 128, 1, 1, 2), Integer32()).setMaxAccess("readonly")
routingStatusGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 128, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
routingStatusInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 128, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
routingStatusMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 128, 1, 1, 5), Integer32()).setMaxAccess("readonly")
routingStatusType = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 128, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4,))).clone(namedValues=NamedValues(("rip", 1), ("bgp", 2), ("ospf", 3), ("static", 4),))).setMaxAccess("readonly")
recovery = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 130, 1))
errdisableRecoverySetup = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 130, 1, 1))
errdisableRecoveryState = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 130, 1, 1, 1), EnabledStatus()).setMaxAccess("readwrite")
errdisableRecoveryReasonTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 130, 1, 1, 2), )
errdisableRecoveryReasonEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 130, 1, 1, 2, 1), ).setIndexNames((0, "ZYXEL-XGS4728F-MIB", "errdisableRecoveryReason"))
errdisableRecoveryReason = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 130, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3,))).clone(namedValues=NamedValues(("loopguard", 0), ("arp", 1), ("bpdu", 2), ("igmp", 3),))).setMaxAccess("readonly")
errdisableRecoveryReasonActive = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 130, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2,))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2),))).setMaxAccess("readwrite")
errdisableRecoveryReasonInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 130, 1, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30,2592000))).setMaxAccess("readwrite")
errdisableRecoveryIfStatusTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 130, 1, 1, 3), )
errdisableRecoveryIfStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 130, 1, 1, 3, 1), ).setIndexNames((0, "ZYXEL-XGS4728F-MIB", "errdisableRecoveryIfStatusReason"), (0, "ZYXEL-XGS4728F-MIB", "errdisableRecoveryIfStatusPort"))
errdisableRecoveryIfStatusReason = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 130, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3,))).clone(namedValues=NamedValues(("loopguard", 0), ("arp", 1), ("bpdu", 2), ("igmp", 3),))).setMaxAccess("readonly")
errdisableRecoveryIfStatusPort = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 130, 1, 1, 3, 1, 2), Integer32()).setMaxAccess("readonly")
errdisableRecoveryIfStatusTimeToRecover = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 130, 1, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30,2592000))).setMaxAccess("readonly")
detect = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 130, 2))
errdisableDetectReasonTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 130, 2, 1), )
errdisableDetectReasonEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 130, 2, 1, 1), ).setIndexNames((0, "ZYXEL-XGS4728F-MIB", "errdisableDetectReason"))
errdisableDetectReason = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 130, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3,))).clone(namedValues=NamedValues(("arp", 1), ("bpdu", 2), ("igmp", 3),))).setMaxAccess("readonly")
errdisableDetectReasonEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 130, 2, 1, 1, 2), EnabledStatus()).setMaxAccess("readwrite")
errdisableDetectReasonMode = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 130, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3,))).clone(namedValues=NamedValues(("inactive-port", 1), ("inactive-reason", 2), ("rate-limitation", 3),))).setMaxAccess("readwrite")
errdisableTrapInfoObject = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 130, 3))
errdisableTrapPort = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 130, 3, 1), Integer32()).setMaxAccess("readonly")
errdisableTrapReason = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 130, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3,))).clone(namedValues=NamedValues(("loopguard", 0), ("arp", 1), ("bpdu", 2), ("igmp", 3),))).setMaxAccess("readonly")
errdisableTrapMode = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 130, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2,))).clone(namedValues=NamedValues(("inactive-port", 0), ("inactive-reason", 1), ("rate-limitation", 2),))).setMaxAccess("readonly")
errdisableTrapNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 130, 4))
errdisableDetectTrap = NotificationType((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 130, 4, 1)).setObjects(*(("ZYXEL-XGS4728F-MIB", "errdisableTrapPort"), ("ZYXEL-XGS4728F-MIB", "errdisableTrapReason"), ("ZYXEL-XGS4728F-MIB", "errdisableTrapMode"),))
errdisableRecoveryTrap = NotificationType((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 130, 4, 2)).setObjects(*(("ZYXEL-XGS4728F-MIB", "errdisableTrapPort"), ("ZYXEL-XGS4728F-MIB", "errdisableTrapReason"), ("ZYXEL-XGS4728F-MIB", "errdisableTrapMode"),))
cpuProtectionTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 131, 1), )
cpuProtectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 131, 1, 1), ).setIndexNames((0, "ZYXEL-XGS4728F-MIB", "cpuProtectionPort"), (0, "ZYXEL-XGS4728F-MIB", "cpuProtectionReason"))
cpuProtectionPort = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 131, 1, 1, 1), Integer32()).setMaxAccess("readonly")
cpuProtectionReason = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 131, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3,))).clone(namedValues=NamedValues(("arp", 1), ("bpdu", 2), ("igmp", 3),))).setMaxAccess("readonly")
cpuProtectionRateLimitSet = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 131, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,256))).setMaxAccess("readwrite")
policyRouteProfileTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 132, 1), )
policyRouteProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 132, 1, 1), ).setIndexNames((0, "ZYXEL-XGS4728F-MIB", "policyRouteProfileName"))
policyRouteProfileEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 132, 1, 1, 1), EnabledStatus()).setMaxAccess("readwrite")
policyRouteProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 132, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
policyRouteProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 132, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
policyRouteRuleTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 132, 2), )
policyRouteRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 132, 2, 1), ).setIndexNames((0, "ZYXEL-XGS4728F-MIB", "policyRouteRuleProfileName"), (0, "ZYXEL-XGS4728F-MIB", "policyRouteRuleSequence"))
policyRouteRuleProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 132, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
policyRouteRuleSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 132, 2, 1, 2), Integer32()).setMaxAccess("readonly")
policyRouteRuleStatement = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 132, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1,))).clone(namedValues=NamedValues(("permit", 0), ("deny", 1),))).setMaxAccess("readwrite")
policyRouteRuleCalssifier = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 132, 2, 1, 4), DisplayString()).setMaxAccess("readwrite")
policyRouteRuleSetNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 132, 2, 1, 5), IpAddress()).setMaxAccess("readwrite")
policyRouteRuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 132, 2, 1, 6), RowStatus()).setMaxAccess("readcreate")
privateVLANTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 133, 1), )
privateVLANEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 133, 1, 1), ).setIndexNames((0, "ZYXEL-XGS4728F-MIB", "privateVLANVid"))
privateVLANName = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 133, 1, 1, 1), DisplayString()).setMaxAccess("readwrite")
privateVLANVid = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 133, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,4094))).setMaxAccess("readonly")
privateVLANPromiscuousPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 133, 1, 1, 3), PortList()).setMaxAccess("readwrite")
privateVLANRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 133, 1, 1, 4), RowStatus()).setMaxAccess("readwrite")
sFlowState = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 134, 1), EnabledStatus()).setMaxAccess("readwrite")
sFlowCollectorTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 134, 2), )
sFlowCollectorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 134, 2, 1), ).setIndexNames((0, "ZYXEL-XGS4728F-MIB", "sFlowCollectorAddressType"), (0, "ZYXEL-XGS4728F-MIB", "sFlowCollectorAddress"))
sFlowCollectorAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 134, 2, 1, 1), InetAddressType()).setMaxAccess("readonly")
sFlowCollectorAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 134, 2, 1, 2), InetAddress()).setMaxAccess("readonly")
sFlowCollectorUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 134, 2, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1,65535))).setMaxAccess("readwrite")
sFlowCollectorRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 134, 2, 1, 4), RowStatus()).setMaxAccess("readwrite")
sFlowPortTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 134, 3), )
sFlowPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 134, 3, 1), ).setIndexNames((0, "BRIDGE-MIB", "dot1dBasePort"))
sFlowPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 134, 3, 1, 1), EnabledStatus()).setMaxAccess("readwrite")
sFlowPortCollectorTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 134, 4), )
sFlowPortCollectorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 134, 4, 1), ).setIndexNames((0, "BRIDGE-MIB", "dot1dBasePort"), (0, "ZYXEL-XGS4728F-MIB", "sFlowPortCollectorAddressType"), (0, "ZYXEL-XGS4728F-MIB", "sFlowPortCollectorAddress"))
sFlowPortCollectorAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 134, 4, 1, 1), InetAddressType()).setMaxAccess("readonly")
sFlowPortCollectorAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 134, 4, 1, 2), InetAddress()).setMaxAccess("readonly")
sFlowPortCollectorSampleRate = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 134, 4, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(256,65535))).setMaxAccess("readwrite")
sFlowPortCollectorPollInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 134, 4, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(20,120))).setMaxAccess("readwrite")
sFlowPortCollectorRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 46, 134, 4, 1, 5), RowStatus()).setMaxAccess("readwrite")
mibBuilder.exportSymbols("ZYXEL-XGS4728F-MIB", PYSNMP_MODULE_ID=ZYXEL_xgs4728f_MIB)
mibBuilder.exportSymbols("ZYXEL-XGS4728F-MIB", sysMgmtCounterReset=sysMgmtCounterReset, sysMgmtReboot=sysMgmtReboot, dhcpSnpEnable=dhcpSnpEnable, portSecurityVMLTable=portSecurityVMLTable, errdisableRecoveryIfStatusEntry=errdisableRecoveryIfStatusEntry, filterName=filterName, mrstpPortPathCost=mrstpPortPathCost, igmpSnpV3CountQueryTx=igmpSnpV3CountQueryTx, mvrGroupRowStatus=mvrGroupRowStatus, mstpPortOperPointToPointMAC=mstpPortOperPointToPointMAC, securedClientIndex=securedClientIndex, EventSeverity=EventSeverity, sysLogServerTable=sysLogServerTable, igmpFilteringProfileName=igmpFilteringProfileName, dhcpSnpDbStatClear=dhcpSnpDbStatClear, sysLogState=sysLogState, routerVrrpDomainEntry=routerVrrpDomainEntry, dhcpSnpDbAbort=dhcpSnpDbAbort, arpType=arpType, aggrPortTable=aggrPortTable, clsuterStatusMaxNumOfMember=clsuterStatusMaxNumOfMember, vlanCounterHCBroadcastPkts=vlanCounterHCBroadcastPkts, portSecurityVMLEntry=portSecurityVMLEntry, mrstp=mrstp, tempDescr=tempDescr, snmpUserAuthProtocol=snmpUserAuthProtocol, portBasedVlanPortListTable=portBasedVlanPortListTable, dhcpSnpDbStatLastIgnoreInvalidIntf=dhcpSnpDbStatLastIgnoreInvalidIntf, mrstpPortPriority=mrstpPortPriority, ospfRedistributeRouteEntry=ospfRedistributeRouteEntry, mstVlanEntry=mstVlanEntry, radiusAcctServerIndex=radiusAcctServerIndex, arpInspectSetup=arpInspectSetup, multicastPortIgmpFilteringProfile=multicastPortIgmpFilteringProfile, dateTimeNewTimeSecond=dateTimeNewTimeSecond, radiusAuthServerEntry=radiusAuthServerEntry, radiusAuthServerUdpPort=radiusAuthServerUdpPort, radiusAuthServerIndex=radiusAuthServerIndex, mrstpNewRoot=mrstpNewRoot, rateLimitPortEgrState=rateLimitPortEgrState, privateVLANTable=privateVLANTable, cpuProtectionSetup=cpuProtectionSetup, routerVrrpTable=routerVrrpTable, dhcpSnpDbStatLastFailTime=dhcpSnpDbStatLastFailTime, sysMemoryPoolId=sysMemoryPoolId, trTCMState=trTCMState, transceiverDdmInfoEntryType=transceiverDdmInfoEntryType, clusterStatusMemberModel=clusterStatusMemberModel, routerDomainIpDvmrp=routerDomainIpDvmrp, policyRouteRuleStatement=policyRouteRuleStatement, authenticationTypeMethodList=authenticationTypeMethodList, igmpSnpV2CountVlanQueryTx=igmpSnpV2CountVlanQueryTx, dot1xSetup=dot1xSetup, pppoeIaVlanEntryVid=pppoeIaVlanEntryVid, policyRouteProfileEnable=policyRouteProfileEnable, igmpsnpVlanMode=igmpsnpVlanMode, sFlowPortState=sFlowPortState, loopGuardState=loopGuardState, eventInstanceName=eventInstanceName, arpInspectState=arpInspectState, policyRouteRuleSetNextHop=policyRouteRuleSetNextHop, arpInspectFilterVid=arpInspectFilterVid, maxNumberOfStaticRoutes=maxNumberOfStaticRoutes, protoBasedVlanSetup=protoBasedVlanSetup, trTCMPortCIR=trTCMPortCIR, ospfInterfaceTable=ospfInterfaceTable, errdisableTrapMode=errdisableTrapMode, ipStatus=ipStatus, selectiveQinQTable=selectiveQinQTable, cpuProtectionReason=cpuProtectionReason, pppoeIaSetup=pppoeIaSetup, portAuthGuestVlanHostMode=portAuthGuestVlanHostMode, dhcpRelayVid=dhcpRelayVid, loopGuardSetup=loopGuardSetup, mstpNotifications=mstpNotifications, routerRipState=routerRipState, radiusAuthServerSetup=radiusAuthServerSetup, vlanCounterEntry=vlanCounterEntry, clusterManagerEntry=clusterManagerEntry, loadSharingDiscoverTime=loadSharingDiscoverTime, vlanMappingPortState=vlanMappingPortState, ipStatusEntry=ipStatusEntry, zyswdot1agCfmMepTransmitLbmDataTlvSize=zyswdot1agCfmMepTransmitLbmDataTlvSize, tacacsAcctServerSharedSecret=tacacsAcctServerSharedSecret, portIsolationSetup=portIsolationSetup, arpLearningSetup=arpLearningSetup, sysLogTypeFacility=sysLogTypeFacility, sysSerialNumber=sysSerialNumber, dhcpRelay=dhcpRelay, mrstpBridgeMaxAge=mrstpBridgeMaxAge, dot1agCfmMIBObjects=dot1agCfmMIBObjects, brLimitState=brLimitState, fanRpmEntry=fanRpmEntry, mirrorEntry=mirrorEntry, routerVrrpAuthType=routerVrrpAuthType, ipsgEntryIp=ipsgEntryIp, igmpFilteringProfileStartAddress=igmpFilteringProfileStartAddress, arpIpAddr=arpIpAddr, mrstpPortDesignatedPort=mrstpPortDesignatedPort, portOpModePortModuleType=portOpModePortModuleType, authorizationTypeName=authorizationTypeName, arpInspect=arpInspect, radiusAcctServerTable=radiusAcctServerTable, accountingTypeBroadcast=accountingTypeBroadcast, transceiverSerialInfoTable=transceiverSerialInfoTable, pppoeIaVlanEntryRemoteID=pppoeIaVlanEntryRemoteID, globalDhcpRelay=globalDhcpRelay, voltageCurValue=voltageCurValue, outOfBandIp=outOfBandIp, igmpSnpV3CountReportRxDrop=igmpSnpV3CountReportRxDrop, igmpSnpV2CountVlanReportRx=igmpSnpV2CountVlanReportRx, accountingTypeMethod=accountingTypeMethod, routerVrrpDomainTable=routerVrrpDomainTable, mstMapVlans3k=mstMapVlans3k, sFlowPortCollectorSampleRate=sFlowPortCollectorSampleRate, igmpFilteringProfileSetup=igmpFilteringProfileSetup, sysMgmtTftpConfigIndex=sysMgmtTftpConfigIndex, dhcpSnpDbStatLastIgnoreBindCol=dhcpSnpDbStatLastIgnoreBindCol, protoBasedVlanPriority=protoBasedVlanPriority, igmpSnpV3CountVlanQueryRx=igmpSnpV3CountVlanQueryRx, mvrRowStatus=mvrRowStatus, mirrorMonitorPort=mirrorMonitorPort, dhcpSnpDbStatTotalIgnoreBindCol=dhcpSnpDbStatTotalIgnoreBindCol, snmpTrapIPGroup=snmpTrapIPGroup, accessCtlEnable=accessCtlEnable, mvrMode=mvrMode, snmpTrapDestEntry=snmpTrapDestEntry, clusterMemberName=clusterMemberName, portQueuingMethodHybridSpq=portQueuingMethodHybridSpq, tacacsAcctServerIndex=tacacsAcctServerIndex, sysMemoryPoolUsed=sysMemoryPoolUsed, vlanMappingPortEntry=vlanMappingPortEntry, dhcpSnpDbStatLastFailReason=dhcpSnpDbStatLastFailReason, trTCMSetup=trTCMSetup, sysMgmtDefaultConfig=sysMgmtDefaultConfig, ethernetCfmStateSetup=ethernetCfmStateSetup, subnetBasedVlanName=subnetBasedVlanName, transceiverSerialInfoEntryPort=transceiverSerialInfoEntryPort, selectiveQinQPort=selectiveQinQPort, clusterSetup=clusterSetup, rateLimitPortCommitRate=rateLimitPortCommitRate, filterRowStatus=filterRowStatus, trTCMPortDscpYellow=trTCMPortDscpYellow, vlanCounterHCOctets=vlanCounterHCOctets, cpuProtectionRateLimitSet=cpuProtectionRateLimitSet, dhcpSnpVlanEntry=dhcpSnpVlanEntry, snmpUserTable=snmpUserTable, daylightSavingTimeEndDateWeek=daylightSavingTimeEndDateWeek, mstpXstRootPort=mstpXstRootPort, inbandEntryRowStatus=inbandEntryRowStatus, maxNumberOfGlobalDhcpRelayRemoteServer=maxNumberOfGlobalDhcpRelayRemoteServer, dhcpServerPrimaryDNS=dhcpServerPrimaryDNS, ospfLsdbExtLinkCount=ospfLsdbExtLinkCount, vlanCounterHCPkts512to1023Octets=vlanCounterHCPkts512to1023Octets, mstpGenForwardDelay=mstpGenForwardDelay, dhcpSnpBindEntryIP=dhcpSnpBindEntryIP, portSecurityVMLPort=portSecurityVMLPort, brLimitPortDlfRate=brLimitPortDlfRate, sysMgmtTftpActionPrivilege13=sysMgmtTftpActionPrivilege13, filterVid=filterVid, sysMgmtDefaultConfigPrivilege13=sysMgmtDefaultConfigPrivilege13, radiusAuthServerSharedSecret=radiusAuthServerSharedSecret, brLimitPortMcState=brLimitPortMcState, globalDhcpRelayInfoData=globalDhcpRelayInfoData, dhcpSnpDbStatAbortExpiry=dhcpSnpDbStatAbortExpiry, inbandEntrySubnetMask=inbandEntrySubnetMask, ospfNbrExtRqstL=ospfNbrExtRqstL, radiusAcctServerTimeout=radiusAcctServerTimeout, dhcpSnpBindEntryVid=dhcpSnpBindEntryVid, dot3OamSetup=dot3OamSetup, tacacsAuthServerIndex=tacacsAuthServerIndex, ipsgEntryType=ipsgEntryType, mrstpNotifications=mrstpNotifications, pppoeIaVlanEntryRowStatus=pppoeIaVlanEntryRowStatus, snmpSetup=snmpSetup, mrstpPortDesignatedBridge=mrstpPortDesignatedBridge, vlanStackSetup=vlanStackSetup, tagVlanPortIsolationState=tagVlanPortIsolationState, igmpSnpV2CountVlanLeaveTx=igmpSnpV2CountVlanLeaveTx, ospfNbrExtDBsmL=ospfNbrExtDBsmL, protoBasedVlanTable=protoBasedVlanTable, routingStatusMetric=routingStatusMetric, multicastStatusTable=multicastStatusTable, ospfRedistributeRouteState=ospfRedistributeRouteState, policyRouteRuleEntry=policyRouteRuleEntry, ospfSummaryAddress=ospfSummaryAddress, loadSharingCriteria=loadSharingCriteria, igmpSnpV2CountVlanReportRxDrop=igmpSnpV2CountVlanReportRxDrop, arpInspectLogEntry=arpInspectLogEntry, igmpSnpCountTable=igmpSnpCountTable, vlanCounterHCPkts1024to1518Octets=vlanCounterHCPkts1024to1518Octets, privateVLANSetup=privateVLANSetup, sFlowCollectorAddress=sFlowCollectorAddress, errdisable=errdisable, aggrGroupState=aggrGroupState, clusterStatusMemberTable=clusterStatusMemberTable, mstpXstId=mstpXstId, vlanMappingRulePort=vlanMappingRulePort, snmpUserGroup=snmpUserGroup, cpuProtectionTable=cpuProtectionTable, aaaSetup=aaaSetup, pppoeIaAccessNodeIdentifierString=pppoeIaAccessNodeIdentifierString, globalDhcpRelayEnable=globalDhcpRelayEnable, dhcpServerMask=dhcpServerMask, authenticationTypeTable=authenticationTypeTable, sFlowState=sFlowState, transceiverSerialInfoEntryVendor=transceiverSerialInfoEntryVendor, errdisableDetectReasonTable=errdisableDetectReasonTable, portReAuthEntryState=portReAuthEntryState, arpInspectLogReason=arpInspectLogReason, daylightSavingTimeStartDateMonth=daylightSavingTimeStartDateMonth, snmpUserPrivProtocol=snmpUserPrivProtocol, igmpSnpV3CountVlanQueryTx=igmpSnpV3CountVlanQueryTx, pppoeIaFlexibleCircuitIDSyntaxOption=pppoeIaFlexibleCircuitIDSyntaxOption, igmpFilteringProfileEntry=igmpFilteringProfileEntry, vlanCounterHCMulticastPkts=vlanCounterHCMulticastPkts, vlanMappingRuleTable=vlanMappingRuleTable, pppoeIaVlanEntryCircuitID=pppoeIaVlanEntryCircuitID, defaultGateway=defaultGateway, mstMapVlans4k=mstMapVlans4k, securedClientEndIp=securedClientEndIp, routerVrrpStatusEntry=routerVrrpStatusEntry, portSecuritySetup=portSecuritySetup, mrstpRootCost=mrstpRootCost, privateVLANRowStatus=privateVLANRowStatus, staticRouteGateway=staticRouteGateway, protoBasedVlanPacketType=protoBasedVlanPacketType, ospfGeneralExtGroup=ospfGeneralExtGroup, radiusServerSetup=radiusServerSetup, ipsgEntryMac=ipsgEntryMac, clusterStatusManager=clusterStatusManager, mrstpDesignatedRoot=mrstpDesignatedRoot, eventServAffective=eventServAffective, tempEntry=tempEntry, dhcpServerTable=dhcpServerTable, selectiveQinQPriority=selectiveQinQPriority, selectiveQinQRowStatus=selectiveQinQRowStatus, arpInspectLogNumPkt=arpInspectLogNumPkt, arpInspectLogPort=arpInspectLogPort, trTCMMode=trTCMMode, arpInfo=arpInfo, eventClearedTrap=eventClearedTrap, sysMgmtTftpActionStatus=sysMgmtTftpActionStatus, tacacsAuthServerSharedSecret=tacacsAuthServerSharedSecret, dhcpRelayRemoteServerEntry=dhcpRelayRemoteServerEntry, vlanCounterPort=vlanCounterPort, pppoeIaPortVlanEntryPort=pppoeIaPortVlanEntryPort, arpInspectFilterMac=arpInspectFilterMac, aggrGroupCriteria=aggrGroupCriteria, portAuthQuietPeriod=portAuthQuietPeriod, igmpSnpV3CountQueryRx=igmpSnpV3CountQueryRx, routerVrrpInterval=routerVrrpInterval, mrstpBridgeEntry=mrstpBridgeEntry, arpInspectLogClear=arpInspectLogClear)
mibBuilder.exportSymbols("ZYXEL-XGS4728F-MIB", mirrorSetup=mirrorSetup, arpInspectFilterPort=arpInspectFilterPort, trTCMPortTable=trTCMPortTable, vlanCounterHCTaggedPkts=vlanCounterHCTaggedPkts, loopGuardPortTable=loopGuardPortTable, daylightSavingTimeStartDateDay=daylightSavingTimeStartDateDay, sysMgmtTftpServerIp=sysMgmtTftpServerIp, routerDomainIpMaskBits=routerDomainIpMaskBits, multicastVlanQueryPort=multicastVlanQueryPort, dateTimeNewDateYear=dateTimeNewDateYear, daylightSavingTimeEndDateHour=daylightSavingTimeEndDateHour, routerVrrpStatusIpAddress=routerVrrpStatusIpAddress, ospfAreaExtName=ospfAreaExtName, mrstpPriority=mrstpPriority, sFlowSetup=sFlowSetup, igmpSnoopingStateSetup=igmpSnoopingStateSetup, macAuthenticationPortState=macAuthenticationPortState, globalDhcpRelayRemoteServerRowStatus=globalDhcpRelayRemoteServerRowStatus, igmpSnpCountPortEntry=igmpSnpCountPortEntry, recovery=recovery, aggrGroupTable=aggrGroupTable, routerVrrpSetup=routerVrrpSetup, igmpSnpV3CountQueryRxDrop=igmpSnpV3CountQueryRxDrop, routingStatusInterface=routingStatusInterface, sysMgmtTftpServiceSetup=sysMgmtTftpServiceSetup, arpInspectStatisticsRequest=arpInspectStatisticsRequest, lldpStateSetup=lldpStateSetup, subnetBasedVlanSrcMaskBit=subnetBasedVlanSrcMaskBit, ctlProtTransTunnelMode=ctlProtTransTunnelMode, trapNotifications=trapNotifications, tacacsAuthServerIpAddr=tacacsAuthServerIpAddr, ctlProtTransTunnelPortTable=ctlProtTransTunnelPortTable, routingStatusDestAddress=routingStatusDestAddress, errdisableRecoveryReasonEntry=errdisableRecoveryReasonEntry, igmpsnp8021pPriority=igmpsnp8021pPriority, igmpSnpV3CountVlanReportRxDrop=igmpSnpV3CountVlanReportRxDrop, mrstpPortEntry=mrstpPortEntry, sysSwYear=sysSwYear, macAuthenticationNamePrefix=macAuthenticationNamePrefix, vlanMappingState=vlanMappingState, clusterManagerVid=clusterManagerVid, fanRpmDescr=fanRpmDescr, routerVrrpName=routerVrrpName, ipsgEntry=ipsgEntry, vlanCounterHCOversizePkts=vlanCounterHCOversizePkts, policyRouteRuleProfileName=policyRouteRuleProfileName, authorizationTypeTable=authorizationTypeTable, ospfNbrExtDeadtime=ospfNbrExtDeadtime, mstpXstPortEntry=mstpXstPortEntry, sysSwModelString=sysSwModelString, macAuthenticationTimeout=macAuthenticationTimeout, tacacsAcctServerIpAddr=tacacsAcctServerIpAddr, loadSharingAgingTime=loadSharingAgingTime, transceiverDdmInfoEntryAlarmMin=transceiverDdmInfoEntryAlarmMin, mstpXstTopologyChangesCount=mstpXstTopologyChangesCount, transceiverSerialInfoEntryTransceiver=transceiverSerialInfoEntryTransceiver, voltageTable=voltageTable, arpInspectPortInterval=arpInspectPortInterval, mirrorState=mirrorState, portQueuingMethodEntry=portQueuingMethodEntry, arpInspectVlanEntry=arpInspectVlanEntry, policyRouteRuleSequence=policyRouteRuleSequence, ospfLsdbExtEntry=ospfLsdbExtEntry, ospfNbrExtTable=ospfNbrExtTable, clusterCandidateModel=clusterCandidateModel, mstMapEntry=mstMapEntry, macAuthenticationPortEntry=macAuthenticationPortEntry, privateVLANName=privateVLANName, mstVlanTable=mstVlanTable, mirrorMirroredState=mirrorMirroredState, products=products, dhcpSnpDbStatLastIgnoreParse=dhcpSnpDbStatLastIgnoreParse, filterEntry=filterEntry, igmpsnpVid=igmpsnpVid, dhcpSnpDbStatFailTrans=dhcpSnpDbStatFailTrans, arpInspectFilterAgingTime=arpInspectFilterAgingTime, globalDhcpRelayRemoteServerTable=globalDhcpRelayRemoteServerTable, pppoeIaVlanEntry=pppoeIaVlanEntry, igmpSnpV3CountPortReportTx=igmpSnpV3CountPortReportTx, routingStatusEntry=routingStatusEntry, ospfSummaryAddrRowStatus=ospfSummaryAddrRowStatus, snmpTrapInterfaceGroup=snmpTrapInterfaceGroup, igmpFilteringProfileEndAddress=igmpFilteringProfileEndAddress, eventDescription=eventDescription, selectiveQinQSpvid=selectiveQinQSpvid, trapSenderNodeId=trapSenderNodeId, mrstpPortAdminEdgePort=mrstpPortAdminEdgePort, multicastPortMaxGroupLimited=multicastPortMaxGroupLimited, arpInspectFilterRowStatus=arpInspectFilterRowStatus, sysMgmtLastActionStatus=sysMgmtLastActionStatus, snmpTrapGroupTable=snmpTrapGroupTable, macAuthenticationPortTable=macAuthenticationPortTable, mstMapIndex=mstMapIndex, dhcpServerPoolSize=dhcpServerPoolSize, mvrVlanID=mvrVlanID, mstVlanIndex=mstVlanIndex, staticRouteTable=staticRouteTable, igmpSnpGroupCountVlanNum=igmpSnpGroupCountVlanNum, clusterStatus=clusterStatus, pppoeIaState=pppoeIaState, arpInspectVlanVid=arpInspectVlanVid, mirrorTable=mirrorTable, tacacsAcctServerEntry=tacacsAcctServerEntry, l2ptPointToPointProtocolGroup=l2ptPointToPointProtocolGroup, transceiverSerialInfoEntryDateCode=transceiverSerialInfoEntryDateCode, multicastVlanStatusTable=multicastVlanStatusTable, trTCMPortEntry=trTCMPortEntry, transceiverDdmInfoEntryWarnMin=transceiverDdmInfoEntryWarnMin, routerDomainVid=routerDomainVid, ospfLsdbExtTable=ospfLsdbExtTable, aggrSystemPriority=aggrSystemPriority, InstanceType=InstanceType, sFlowPortTable=sFlowPortTable, portOpModeSetup=portOpModeSetup, protoBasedVlanPort=protoBasedVlanPort, multicastPortLeaveTimeout=multicastPortLeaveTimeout, ospfSummaryAddrTable=ospfSummaryAddrTable, accountingTypeName=accountingTypeName, igmpSnpCountEntry=igmpSnpCountEntry, rateLimitPortState=rateLimitPortState, mrstpPort=mrstpPort, ospfRedistributeRouteMetric=ospfRedistributeRouteMetric, pppoeIaPortVlanEntryRowStatus=pppoeIaPortVlanEntryRowStatus, igmpSnpV2CountPortReportRxDrop=igmpSnpV2CountPortReportRxDrop, dhcpSnpDhcpVlanVid=dhcpSnpDhcpVlanVid, mrstpSetup=mrstpSetup, multicastStatusGroup=multicastStatusGroup, ospfVirtualLinkEntry=ospfVirtualLinkEntry, routerDomainIpRipDirection=routerDomainIpRipDirection, diffservState=diffservState, arpInspectPortEntry=arpInspectPortEntry, protoBasedVlanVid=protoBasedVlanVid, mrstpRootPort=mrstpRootPort, layer3Setup=layer3Setup, l2ptProtocolGroup=l2ptProtocolGroup, igmpsnpVlanTable=igmpsnpVlanTable, igmpSnpV2CountLeaveTx=igmpSnpV2CountLeaveTx, pppoeIaPortEntryTrust=pppoeIaPortEntryTrust, errdisableRecoverySetup=errdisableRecoverySetup, eventObjects=eventObjects, sysLogServerLogLevel=sysLogServerLogLevel, errdisableTrapReason=errdisableTrapReason, inbandIpEntry=inbandIpEntry, portAuthGuestVlanHostModeMultiSecureNumber=portAuthGuestVlanHostModeMultiSecureNumber, ipsgEntryPort=ipsgEntryPort, authorizationSetup=authorizationSetup, igmpsnpVlanEntry=igmpsnpVlanEntry, mstpGenMaxAge=mstpGenMaxAge, portAuthTable=portAuthTable, staticRouteMetric=staticRouteMetric, cpuProtectionEntry=cpuProtectionEntry, aggrGroupIndex=aggrGroupIndex, authenticationTypeEntry=authenticationTypeEntry, l2ptTable=l2ptTable, dhcpRelayTable=dhcpRelayTable, arpLearningPortTable=arpLearningPortTable, subnetBasedVlanSrcIp=subnetBasedVlanSrcIp, transceiverDdmInfoTable=transceiverDdmInfoTable, accessCtlTable=accessCtlTable, ipStatusIPAddress=ipStatusIPAddress, multicastPortQuerierMode=multicastPortQuerierMode, tacacsAcctServerTable=tacacsAcctServerTable, mstMapTable=mstMapTable, mstpXstPortTable=mstpXstPortTable, outOfBandIpSetup=outOfBandIpSetup, vlanStackTunnelPortTpid=vlanStackTunnelPortTpid, igmpSnpReportProxySetup=igmpSnpReportProxySetup, portAuthGuestVlan=portAuthGuestVlan, dateTimeZone=dateTimeZone, tacacsAcctServerTcpPort=tacacsAcctServerTcpPort, portSecurityPortState=portSecurityPortState, subnetBasedVlanTable=subnetBasedVlanTable, selectiveQinQName=selectiveQinQName, ospfSummaryAddrMaskBit=ospfSummaryAddrMaskBit, policyRouteProfileName=policyRouteProfileName, eventTable=eventTable, mstpXstPortEnable=mstpXstPortEnable, multicastStatusIndex=multicastStatusIndex, dhcpSnpDhcpVlan=dhcpSnpDhcpVlan, selectiveQinQCvid=selectiveQinQCvid, snmpTrapDestPort=snmpTrapDestPort, trapPersistence=trapPersistence, rpVrrpRowStatus=rpVrrpRowStatus, mvrName=mvrName, aggrPortEntry=aggrPortEntry, aggrGroupEntry=aggrGroupEntry, trTCMPortPIR=trTCMPortPIR, clusterCandidates=clusterCandidates, accessCtlTimeout=accessCtlTimeout, multicastStatusEntry=multicastStatusEntry, mvrGroupName=mvrGroupName, ospfInterfaceEntry=ospfInterfaceEntry, portBasedVlanSetup=portBasedVlanSetup, ipsgEntryVid=ipsgEntryVid, arpLearningPortMode=arpLearningPortMode, igmpSnpV3CountReportTx=igmpSnpV3CountReportTx, mrstpBridgeHelloTime=mrstpBridgeHelloTime, rateLimitSetup=rateLimitSetup, transceiverDdmInfoEntryDescription=transceiverDdmInfoEntryDescription, sFlowPortCollectorTable=sFlowPortCollectorTable, sysSwPlatformMajorVers=sysSwPlatformMajorVers, mvrGroupTable=mvrGroupTable, fanRpmMaxValue=fanRpmMaxValue, snmpTrapSwitchGroup=snmpTrapSwitchGroup, protoBasedVlanName=protoBasedVlanName, routerDomainIpRipVersion=routerDomainIpRipVersion, brLimitPortTable=brLimitPortTable, routerVrrpStatus=routerVrrpStatus, sysSwVersionControlNbr=sysSwVersionControlNbr, tempHighThresh=tempHighThresh, subnetBasedVlanState=subnetBasedVlanState, routerDomainSetup=routerDomainSetup, igmpSnpGroupCountStatus=igmpSnpGroupCountStatus, dhcpSnpDbStatLastIgnoreExpireLease=dhcpSnpDbStatLastIgnoreExpireLease, rateLimitState=rateLimitState, igmpSnpV2CountQueryRx=igmpSnpV2CountQueryRx, authorizationTypeMethod=authorizationTypeMethod, vlanTrunkPortTable=vlanTrunkPortTable, igmpSnpV2CountVlanLeaveRxDrop=igmpSnpV2CountVlanLeaveRxDrop, voltageLowThresh=voltageLowThresh, dot3OamPortEntry=dot3OamPortEntry, vlanStackState=vlanStackState, sysInfo=sysInfo, vlanTrunkPortState=vlanTrunkPortState, dhcpSnpDbStatFirstSuccessAccess=dhcpSnpDbStatFirstSuccessAccess, ospfSummaryAddrEntry=ospfSummaryAddrEntry, igmpsnpVlanName=igmpsnpVlanName, esSeries=esSeries, igmpSnpV2CountReportTx=igmpSnpV2CountReportTx, arpInspectLogInterval=arpInspectLogInterval, authorizationTypeActive=authorizationTypeActive, vlanMappingRulePriority=vlanMappingRulePriority, brLimitPortBrState=brLimitPortBrState, portOpModePortIntrusionLock=portOpModePortIntrusionLock, zyswdot1agCfmMepTable=zyswdot1agCfmMepTable, sFlowPortEntry=sFlowPortEntry, rateLimitPortPeakState=rateLimitPortPeakState, eventSeqNum=eventSeqNum, errdisableRecoveryIfStatusTable=errdisableRecoveryIfStatusTable, vlanCounterVlanID=vlanCounterVlanID, routerDomainEntry=routerDomainEntry, pppoeIaVlanTable=pppoeIaVlanTable, macAuthenticationSetup=macAuthenticationSetup, errdisableTrapNotifications=errdisableTrapNotifications, fanRpmIndex=fanRpmIndex, protoBasedVlanState=protoBasedVlanState, arpInspectLogIp=arpInspectLogIp, dhcpServer=dhcpServer, tacacsAuthServerSetup=tacacsAuthServerSetup, sFlowCollectorAddressType=sFlowCollectorAddressType, securedClientEnable=securedClientEnable, policyRouteProfileTable=policyRouteProfileTable, multicastPortSetup=multicastPortSetup)
mibBuilder.exportSymbols("ZYXEL-XGS4728F-MIB", mstp=mstp, ospfIfBackupDesignatedRouterID=ospfIfBackupDesignatedRouterID, radiusAcctServerEntry=radiusAcctServerEntry, radiusAcctServerIpAddr=radiusAcctServerIpAddr, filterMacAddr=filterMacAddr, snmpTrapUserName=snmpTrapUserName, portOpModePortLBTestStatus=portOpModePortLBTestStatus, mstpTopologyChange=mstpTopologyChange, ospfLsdbExtRouteAddress=ospfLsdbExtRouteAddress, accessCtlSetup=accessCtlSetup, sysLogTypeIndex=sysLogTypeIndex, ipStatusVid=ipStatusVid, diffservSetup=diffservSetup, dateTimeNewTimeMinute=dateTimeNewTimeMinute, sysMemoryPoolName=sysMemoryPoolName, pppoeIaFlexibleCircuitIDSyntaxActive=pppoeIaFlexibleCircuitIDSyntaxActive, radiusAuthServerTimeout=radiusAuthServerTimeout, arpInspectPortTrust=arpInspectPortTrust, sFlowPortCollectorAddress=sFlowPortCollectorAddress, igmpSnpCountIndex=igmpSnpCountIndex, tempTable=tempTable, ctlProtTransTunnelPortEntry=ctlProtTransTunnelPortEntry, mstpXstEntry=mstpXstEntry, transceiverSerialInfoEntry=transceiverSerialInfoEntry, ospfIfAdjacentNbrCount=ospfIfAdjacentNbrCount, ospfRedistributeRouteType=ospfRedistributeRouteType, mvrPortTagging=mvrPortTagging, clusterMembers=clusterMembers, mrstpHoldTime=mrstpHoldTime, ospfAreaExtTable=ospfAreaExtTable, privateVLANEntry=privateVLANEntry, dateTimeServerType=dateTimeServerType, portOpModePortCX4CableLength=portOpModePortCX4CableLength, dhcpServerGateway=dhcpServerGateway, igmpSnpV2CountVlanReportTx=igmpSnpV2CountVlanReportTx, dhcpSnpDbStat=dhcpSnpDbStat, staticRouteEntry=staticRouteEntry, errdisableRecoveryIfStatusReason=errdisableRecoveryIfStatusReason, multicastVlanStatusVlanID=multicastVlanStatusVlanID, igmpSnpV2CountPortLeaveRxDrop=igmpSnpV2CountPortLeaveRxDrop, clusterCandidateName=clusterCandidateName, clusterStatusRole=clusterStatusRole, tacacsServerSetup=tacacsServerSetup, mstpXstTable=mstpXstTable, portOpModePortTable=portOpModePortTable, portSecurityPortCount=portSecurityPortCount, clusterCandidateTable=clusterCandidateTable, sFlowCollectorRowStatus=sFlowCollectorRowStatus, ospfNbrExtEntry=ospfNbrExtEntry, arpInspectPortRate=arpInspectPortRate, accountingTypeActive=accountingTypeActive, inbandEntryIp=inbandEntryIp, portSecurityState=portSecurityState, igmpSnpCountVlanEntry=igmpSnpCountVlanEntry, dhcpSnp=dhcpSnp, ipStatusType=ipStatusType, snmpSetCommunity=snmpSetCommunity, aggrState=aggrState, mvrPortRole=mvrPortRole, arpInspectVlanStatus=arpInspectVlanStatus, mrstpPortDesignatedRoot=mrstpPortDesignatedRoot, ipSetup=ipSetup, mstpXstInternalRootCost=mstpXstInternalRootCost, aggrGroupDynamicState=aggrGroupDynamicState, ospfVirtualLinkTable=ospfVirtualLinkTable, routerVrrpStatusVRStatus=routerVrrpStatusVRStatus, arpInspectFilterTable=arpInspectFilterTable, portIsolationEntry=portIsolationEntry, arpInspectStatisticsClear=arpInspectStatisticsClear, portOpModePortLinkUpType=portOpModePortLinkUpType, igmpSnpV3CountVlanQueryRxDrop=igmpSnpV3CountVlanQueryRxDrop, subnetBasedVlanEntryState=subnetBasedVlanEntryState, portIsolationState=portIsolationState, igmpSnpV2CountReportRx=igmpSnpV2CountReportRx, mrstpForwardDelay=mrstpForwardDelay, dhcpSnpDbStatSuccWrite=dhcpSnpDbStatSuccWrite, diffservMapDscp=diffservMapDscp, dhcpSnpVlanEntryInfo=dhcpSnpVlanEntryInfo, sysLogSetup=sysLogSetup, ipsgTable=ipsgTable, pppoeIaPortVlanEntry=pppoeIaPortVlanEntry, authenticationTypeName=authenticationTypeName, igmpFilteringMaxNumberOfProfile=igmpFilteringMaxNumberOfProfile, eventName=eventName, trTCMPortDscpGreen=trTCMPortDscpGreen, dhcpSnpDb=dhcpSnpDb, tempMinValue=tempMinValue, snmpTrapSystemGroup=snmpTrapSystemGroup, mstpPortOperEdgePort=mstpPortOperEdgePort, multicastVlanStatusEntry=multicastVlanStatusEntry, accessCtlEntry=accessCtlEntry, multicastStatusVlanID=multicastStatusVlanID, clusterStatusMemberMac=clusterStatusMemberMac, dhcpSnpPortEntryRate=dhcpSnpPortEntryRate, loopGuardPortEntry=loopGuardPortEntry, mstpXstPortDesignatedRoot=mstpXstPortDesignatedRoot, dhcpSnpDbStatStartupFail=dhcpSnpDbStatStartupFail, radiusAuthServerMode=radiusAuthServerMode, igmpSnpCountVlanIndex=igmpSnpCountVlanIndex, clusterMaxNumOfMember=clusterMaxNumOfMember, eventSetTime=eventSetTime, dhcpSnpDbStatTotalIgnoreParse=dhcpSnpDbStatTotalIgnoreParse, portAuthSupplicantTimeout=portAuthSupplicantTimeout, l2ptState=l2ptState, mstpGenCistRootBrid=mstpGenCistRootBrid, sysMgmt=sysMgmt, igmpFilteringProfileTable=igmpFilteringProfileTable, mrstpBridgeIndex=mrstpBridgeIndex, igmpSnpV3CountVlanReportTx=igmpSnpV3CountVlanReportTx, fanRpmMinValue=fanRpmMinValue, mvrSetup=mvrSetup, vlanMappingRuleEntry=vlanMappingRuleEntry, vlanCounterHCPkts=vlanCounterHCPkts, selectiveQinQEntry=selectiveQinQEntry, outOfBandSubnetMask=outOfBandSubnetMask, arpInspectLog=arpInspectLog, radiusAuthServerIpAddr=radiusAuthServerIpAddr, dhcpSnpBindEntryMac=dhcpSnpBindEntryMac, mstpXstBridgeId=mstpXstBridgeId, errdisableDetectReasonEntry=errdisableDetectReasonEntry, routingStatus=routingStatus, maxNumberOfDhcpRelay=maxNumberOfDhcpRelay, eventEventId=eventEventId, authorizationTypeEntry=authorizationTypeEntry, arpInspectLogRate=arpInspectLogRate, igmpSnpV2CountPortLeaveTx=igmpSnpV2CountPortLeaveTx, globalDhcpRelayInfoEnable=globalDhcpRelayInfoEnable, snmpTrapDestTable=snmpTrapDestTable, routingStatusGateway=routingStatusGateway, portOpModePortFlowCntl=portOpModePortFlowCntl, trapInfoObjects=trapInfoObjects, trapSenderStatus=trapSenderStatus, portAuthEntryState=portAuthEntryState, brLimitPortDlfState=brLimitPortDlfState, mstpGenCfgIdCfgDigest=mstpGenCfgIdCfgDigest, dhcpServerSecondaryDNS=dhcpServerSecondaryDNS, vlanMappingSetup=vlanMappingSetup, mstpXstPortIndex=mstpXstPortIndex, vlanMappingRuleVid=vlanMappingRuleVid, securedClientTable=securedClientTable, MstiOrCistInstanceIndex=MstiOrCistInstanceIndex, routerDvmrpState=routerDvmrpState, securedClientStartIp=securedClientStartIp, vlanMappingPortTable=vlanMappingPortTable, mvrTable=mvrTable, portReAuthEntryTimer=portReAuthEntryTimer, arpInspectVlanTable=arpInspectVlanTable, layer2Setup=layer2Setup, daylightSavingTimeStartDateHour=daylightSavingTimeStartDateHour, l2ptMode=l2ptMode, dhcpRelayOption82Enable=dhcpRelayOption82Enable, routerDvmrpThreshold=routerDvmrpThreshold, dhcpSnpPortEntry=dhcpSnpPortEntry, portSecurityVMLMacLimit=portSecurityVMLMacLimit, igmpSnpCountVlanTable=igmpSnpCountVlanTable, igmpSnpCountPortTable=igmpSnpCountPortTable, eventInstanceId=eventInstanceId, errdisableRecoveryTrap=errdisableRecoveryTrap, mvrGroupEntry=mvrGroupEntry, dhcpSnpDbStatTotalIgnoreInvalidIntf=dhcpSnpDbStatTotalIgnoreInvalidIntf, radiusAcctServerUdpPort=radiusAcctServerUdpPort, multicastPortTable=multicastPortTable, dhcpSnpBindEntryLease=dhcpSnpBindEntryLease, portSecurityVMLRowStatus=portSecurityVMLRowStatus, protoBasedVlanEntry=protoBasedVlanEntry, sFlowCollectorEntry=sFlowCollectorEntry, dhcpSnpDbStatTotalIgnoreExpireLease=dhcpSnpDbStatTotalIgnoreExpireLease, globalDhcpRelayRemoteServerIp=globalDhcpRelayRemoteServerIp, igmpSnpGroupCountPortNum=igmpSnpGroupCountPortNum, portIsolationTable=portIsolationTable, stpMode=stpMode, clusterMemberPassword=clusterMemberPassword, arpMacAddr=arpMacAddr, ospfIfNbrCount=ospfIfNbrCount, ospfNbrExtRole=ospfNbrExtRole, maxNumberOfMVR=maxNumberOfMVR, vlanCounterHCPkts64Octets=vlanCounterHCPkts64Octets, arpInspectStatisticsForward=arpInspectStatisticsForward, dateTimeNewDateMonth=dateTimeNewDateMonth, portQueuingMethodTable=portQueuingMethodTable, loadSharing=loadSharing, mstpGenMaxHops=mstpGenMaxHops, arpInspectPortIndex=arpInspectPortIndex, ospfRedistributeRouteTable=ospfRedistributeRouteTable, dhcpRelayRemoteServerRowStatus=dhcpRelayRemoteServerRowStatus, portSecurityMacFreeze=portSecurityMacFreeze, transceiverSerialInfoEntryRevision=transceiverSerialInfoEntryRevision, snmpUserSecurityLevel=snmpUserSecurityLevel, transceiverDdmInfoEntry=transceiverDdmInfoEntry, mrstpState=mrstpState, sFlowCollectorTable=sFlowCollectorTable, routerDomainIpIgmpVersion=routerDomainIpIgmpVersion, hwMonitorInfo=hwMonitorInfo, dateTimeDaylightSavingTimeSetup=dateTimeDaylightSavingTimeSetup, dhcpSnpDbStatAgentRunning=dhcpSnpDbStatAgentRunning, fanRpmCurValue=fanRpmCurValue, igmpSnpV3CountVlanReportRx=igmpSnpV3CountVlanReportRx, errdisableRecoveryIfStatusPort=errdisableRecoveryIfStatusPort, vlanMappingRuleRowStatus=vlanMappingRuleRowStatus, dhcpSnpDbStatTotalAttempt=dhcpSnpDbStatTotalAttempt, faultTrapsMIB=faultTrapsMIB, dhcpRelayRemoteServerTable=dhcpRelayRemoteServerTable, mstpXstTimeSinceTopologyChange=mstpXstTimeSinceTopologyChange, sysMgmtBootupImage=sysMgmtBootupImage, routerVrrpVirtualID=routerVrrpVirtualID, arpInspectLogVid=arpInspectLogVid, mrstpTopologyChange=mrstpTopologyChange, mstpGenCistRootPathCost=mstpGenCistRootPathCost, vlanCounterHCPkts128to255Octets=vlanCounterHCPkts128to255Octets, aggrPortDynamicStateTimeout=aggrPortDynamicStateTimeout, staticRouteRowStatus=staticRouteRowStatus, sysMgmtSystemStatus=sysMgmtSystemStatus, routerVrrpStatusUpLinkStatus=routerVrrpStatusUpLinkStatus, routerVrrpAuthKey=routerVrrpAuthKey, arpInspectVlanLog=arpInspectVlanLog, policyRouteProfileEntry=policyRouteProfileEntry, policyRouteRuleRowStatus=policyRouteRuleRowStatus, trTCMPortDscpRed=trTCMPortDscpRed, transceiverInfo=transceiverInfo, portBasedVlanPortListEntry=portBasedVlanPortListEntry, EventPersistence=EventPersistence, dhcpRelayInfoEnable=dhcpRelayInfoEnable, ospfIfKeyId=ospfIfKeyId, accessCtlServicePort=accessCtlServicePort, mstpGenHelloTime=mstpGenHelloTime, brLimitPortMcRate=brLimitPortMcRate, inbandEntryVid=inbandEntryVid, errdisableRecoveryReason=errdisableRecoveryReason, accountingTypePrivilege=accountingTypePrivilege, igmpsnpVlanRowStatus=igmpsnpVlanRowStatus, ospfIfHelloDueTime=ospfIfHelloDueTime, igmpSnpV2CountVlanQueryRx=igmpSnpV2CountVlanQueryRx, arpEntry=arpEntry, portQueuingMethodHybridSpqTable=portQueuingMethodHybridSpqTable, routerVrrpMaxNumber=routerVrrpMaxNumber, zyswdot1agCfmMepEntry=zyswdot1agCfmMepEntry, cpuProtectionPort=cpuProtectionPort, sysMgmtTftpAction=sysMgmtTftpAction, l2ptSetup=l2ptSetup, dhcpServerVid=dhcpServerVid, clusterMemberMac=clusterMemberMac, mrstpPortOperEdgePort=mrstpPortOperEdgePort, eventSeverity=eventSeverity, ospfDistance=ospfDistance, accountingSetup=accountingSetup, sysSwDay=sysSwDay, dhcpSnpDbStatFirstSuccAccess=dhcpSnpDbStatFirstSuccAccess, dhcpRelayInfoData=dhcpRelayInfoData, dateTimeNewTimeHour=dateTimeNewTimeHour, dhcpSnpBindTable=dhcpSnpBindTable, arpInspectLogTime=arpInspectLogTime, tacacsAuthServerTable=tacacsAuthServerTable, multicastPortEntry=multicastPortEntry, igmpSnpV3CountReportRx=igmpSnpV3CountReportRx)
mibBuilder.exportSymbols("ZYXEL-XGS4728F-MIB", igmpFilteringProfileRowStatus=igmpFilteringProfileRowStatus, sysMemoryPoolTotal=sysMemoryPoolTotal, igmpSnpV3CountPortQueryRx=igmpSnpV3CountPortQueryRx, sysLogTypeTable=sysLogTypeTable, reservedMulticastFrameForwarding=reservedMulticastFrameForwarding, clusterStatusMemberName=clusterStatusMemberName, filterActionState=filterActionState, routerRipDistance=routerRipDistance, igmpSnpV2CountPortReportTx=igmpSnpV2CountPortReportTx, vlanCounterTimeout=vlanCounterTimeout, pppoeIaPortVlanEntryRemoteIDString=pppoeIaPortVlanEntryRemoteIDString, portSecurityVMLVID=portSecurityVMLVID, dhcpSnpDbStatLastSuccTime=dhcpSnpDbStatLastSuccTime, xgs4728f=xgs4728f, portBasedVlanPortListMembers=portBasedVlanPortListMembers, transceiverDdmInfoEntryWarnMax=transceiverDdmInfoEntryWarnMax, mvrEntry=mvrEntry, ospfIfMaskbits=ospfIfMaskbits, arpInspectFilterClear=arpInspectFilterClear, clusterMemberRowStatus=clusterMemberRowStatus, eventInstanceType=eventInstanceType, radiusAcctServerSetup=radiusAcctServerSetup, brLimitPortBrRate=brLimitPortBrRate, snmpTrapVersion=snmpTrapVersion, transceiverDdmInfoEntryAlarmMax=transceiverDdmInfoEntryAlarmMax, eventOnTrap=eventOnTrap, ospfVirtualLinkKeyId=ospfVirtualLinkKeyId, ospfIfDesignatedRouterID=ospfIfDesignatedRouterID, portAuthMaxRequest=portAuthMaxRequest, dhcpRelayRemoteServerIp=dhcpRelayRemoteServerIp, vlanCounterTable=vlanCounterTable, sysMgmtConfigSavePrivilege13=sysMgmtConfigSavePrivilege13, arpTable=arpTable, multicastGrpHostTimeout=multicastGrpHostTimeout, maxNumberOfDhcpRelayRemoteServer=maxNumberOfDhcpRelayRemoteServer, tacacsAcctServerSetup=tacacsAcctServerSetup, snmpTrapDestIP=snmpTrapDestIP, rateLimitPortPeakRate=rateLimitPortPeakRate, arpInspectStatisticsReceived=arpInspectStatisticsReceived, mrstpTopChanges=mrstpTopChanges, portAuthState=portAuthState, snmpGetCommunity=snmpGetCommunity, policyRouteRuleCalssifier=policyRouteRuleCalssifier, pppoeIaPortVlanEntryVid=pppoeIaPortVlanEntryVid, ospfNbrExtInterface=ospfNbrExtInterface, globalDhcpRelayOption82Enable=globalDhcpRelayOption82Enable, mrstpPortTable=mrstpPortTable, ipsgEntryState=ipsgEntryState, sFlowPortCollectorPollInterval=sFlowPortCollectorPollInterval, dhcpRelayEntry=dhcpRelayEntry, mrstpPortOnBridgeIndex=mrstpPortOnBridgeIndex, mstMapVlans2k=mstMapVlans2k, staticRouteSetup=staticRouteSetup, ospfLsdbExtRouteMaskbits=ospfLsdbExtRouteMaskbits, clusterStatusMemberEntry=clusterStatusMemberEntry, rateLimitPortEgrRate=rateLimitPortEgrRate, tacacsAuthServerTimeout=tacacsAuthServerTimeout, errdisableDetectReasonEnable=errdisableDetectReasonEnable, rateLimitPortTable=rateLimitPortTable, multicastPortMaxOfGroup=multicastPortMaxOfGroup, mrstpPortForwardTransitions=mrstpPortForwardTransitions, arpInspectLogMac=arpInspectLogMac, arpInspectStatisticsEntry=arpInspectStatisticsEntry, pppoe=pppoe, mrstpMaxAge=mrstpMaxAge, mstpXstPortXstId=mstpXstPortXstId, staticRouteIp=staticRouteIp, errdisableDetectReason=errdisableDetectReason, portQueuingMethodWeight=portQueuingMethodWeight, clusterManagerRowStatus=clusterManagerRowStatus, igmpFilteringStateSetup=igmpFilteringStateSetup, dhcpSnpVlanEntryEnable=dhcpSnpVlanEntryEnable, faultMIB=faultMIB, igmpSnpV2CountLeaveRx=igmpSnpV2CountLeaveRx, routerDomainIpEntry=routerDomainIpEntry, voltageMinValue=voltageMinValue, arpInspectStatisticsVid=arpInspectStatisticsVid, privateVLANVid=privateVLANVid, routerVrrpStatusVirtualID=routerVrrpStatusVirtualID, unknownMulticastFrameForwarding=unknownMulticastFrameForwarding, dhcpSnpDbStatFailRead=dhcpSnpDbStatFailRead, routerIgmpState=routerIgmpState, errdisableDetectReasonMode=errdisableDetectReasonMode, rateLimitPortCommitState=rateLimitPortCommitState, dhcpSnpDbStatLastIgnoreUnsuppVlan=dhcpSnpDbStatLastIgnoreUnsuppVlan, trapRefSeqNum=trapRefSeqNum, queuingMethodSetup=queuingMethodSetup, igmpSnpV2CountPortLeaveRx=igmpSnpV2CountPortLeaveRx, mstpXstPortPriority=mstpXstPortPriority, sysMemoryPoolUtil=sysMemoryPoolUtil, arpInspectFilterEntry=arpInspectFilterEntry, globalDhcpRelayRemoteServerEntry=globalDhcpRelayRemoteServerEntry, arpInspectFilterReason=arpInspectFilterReason, igmpSnpV2CountVlanQueryRxDrop=igmpSnpV2CountVlanQueryRxDrop, policyRouteRuleTable=policyRouteRuleTable, vlanStackPortMode=vlanStackPortMode, sysMgmtBootupConfig=sysMgmtBootupConfig, portQueuingMethodHybridSpqEntry=portQueuingMethodHybridSpqEntry, mvrGroupEndAddress=mvrGroupEndAddress, clusterMemberModel=clusterMemberModel, mrstpHelloTime=mrstpHelloTime, mrstpPortState=mrstpPortState, dhcpServerEntry=dhcpServerEntry, multicastStatus=multicastStatus, ctlProtTransSetup=ctlProtTransSetup, mvrPortTable=mvrPortTable, dot1agCfmSetup=dot1agCfmSetup, tempMaxValue=tempMaxValue, sFlowCollectorUdpPort=sFlowCollectorUdpPort, sysLogServerAddress=sysLogServerAddress, igmpSnpV3CountPortReportRxDrop=igmpSnpV3CountPortReportRxDrop, voltageIndex=voltageIndex, sysSwPlatformMinorVers=sysSwPlatformMinorVers, snmpTrapAAAGroup=snmpTrapAAAGroup, eventInstanceIdNumber=eventInstanceIdNumber, filterTable=filterTable, mstMapRowStatus=mstMapRowStatus, staticRouteName=staticRouteName, arpInspectLogEntries=arpInspectLogEntries, mstpGenCfgIdName=mstpGenCfgIdName, vlanStackPortTable=vlanStackPortTable, portAuthGuestVlanState=portAuthGuestVlanState, tacacsAuthServerMode=tacacsAuthServerMode, dhcpSnpDbStatFailWrite=dhcpSnpDbStatFailWrite, dot3OamFunctionsSupported=dot3OamFunctionsSupported, mstpGenCfgIdRevLevel=mstpGenCfgIdRevLevel, igmpSnpV2CountQueryRxDrop=igmpSnpV2CountQueryRxDrop, daylightSavingTimeState=daylightSavingTimeState, maxNumberOfDhcpServers=maxNumberOfDhcpServers, clusterManagerTable=clusterManagerTable, vlanCounterRowStatus=vlanCounterRowStatus, errdisableRecoveryState=errdisableRecoveryState, voltageEntry=voltageEntry, igmpSnpV2CountPortQueryRx=igmpSnpV2CountPortQueryRx, transceiverSerialInfoEntryPartNo=transceiverSerialInfoEntryPartNo, dot3OamState=dot3OamState, routerVrrpUplinkGateway=routerVrrpUplinkGateway, transceiverDdmInfoEntryCurrent=transceiverDdmInfoEntryCurrent, sysHwMinorVers=sysHwMinorVers, sysLogServerRowStatus=sysLogServerRowStatus, mstpGenState=mstpGenState, pppoeIaPortEntryRemoteIDString=pppoeIaPortEntryRemoteIDString, arpInspectStatisticsDrop=arpInspectStatisticsDrop, daylightSavingTimeStartDateWeek=daylightSavingTimeStartDateWeek, policyRouteSetup=policyRouteSetup, dhcpSnpVlanEntryVid=dhcpSnpVlanEntryVid, dot3OamPortTable=dot3OamPortTable, dhcpSnpDbStatSuccRead=dhcpSnpDbStatSuccRead, pppoeIaPortEntry=pppoeIaPortEntry, igmpSnpV2CountPortReportRx=igmpSnpV2CountPortReportRx, dhcpSnpPortEntryPort=dhcpSnpPortEntryPort, dhcpSnpDbWriteDelay=dhcpSnpDbWriteDelay, tempCurValue=tempCurValue, clusterMemberTable=clusterMemberTable, sysLogServerEntry=sysLogServerEntry, arpMacVid=arpMacVid, snmpVersion=snmpVersion, daylightSavingTimeEndDateDay=daylightSavingTimeEndDateDay, dhcpSnpDbStatDelayExpiry=dhcpSnpDbStatDelayExpiry, mstVlanMstIndex=mstVlanMstIndex, vlanMappingRuleName=vlanMappingRuleName, portOpModePortEntry=portOpModePortEntry, ipStatusPort=ipStatusPort, pppoeIaPortEntryCircuitIDString=pppoeIaPortEntryCircuitIDString, diffservPortState=diffservPortState, dhcpSnpBindEntry=dhcpSnpBindEntry, dhcpSetup=dhcpSetup, portAuthTxPeriod=portAuthTxPeriod, portSecurityPortLearnState=portSecurityPortLearnState, UtcTimeStamp=UtcTimeStamp, subnetBasedVlanPriority=subnetBasedVlanPriority, sysLogTypeName=sysLogTypeName, dot1agCfmMep=dot1agCfmMep, pppoeIaPortTable=pppoeIaPortTable, maxNumberOfMvrGroup=maxNumberOfMvrGroup, brLimitPortEntry=brLimitPortEntry, arpInspectLogTable=arpInspectLogTable, mstpXstBridgePriority=mstpXstBridgePriority, pppoeIaPortVlanTable=pppoeIaPortVlanTable, accountingTypeEntry=accountingTypeEntry, vlanStackPortEntry=vlanStackPortEntry, mstMapVlans1k=mstMapVlans1k, portQueuingMethodMode=portQueuingMethodMode, tacacsAuthServerTcpPort=tacacsAuthServerTcpPort, diffservMapPriority=diffservMapPriority, mstpPortAdminEdgePort=mstpPortAdminEdgePort, vlanCounterSetup=vlanCounterSetup, sysMemoryPoolEntry=sysMemoryPoolEntry, routerVrrpStatusTable=routerVrrpStatusTable, mstpXstPortPathCost=mstpXstPortPathCost, arpInspectPortTable=arpInspectPortTable, dhcpSnpDbStatTotalIgnoreUnsuppVlan=dhcpSnpDbStatTotalIgnoreUnsuppVlan, mvrPortEntry=mvrPortEntry, dhcpSnpVlanTable=dhcpSnpVlanTable, policyRouteProfileRowStatus=policyRouteProfileRowStatus, ospfNbrExtRXmtL=ospfNbrExtRXmtL, sFlowPortCollectorAddressType=sFlowPortCollectorAddressType, routerVrrpPrimaryVirtualIP=routerVrrpPrimaryVirtualIP, mstpXstPortDesignatedCost=mstpXstPortDesignatedCost, routingStatusDestMaskbits=routingStatusDestMaskbits, sysHwMajorVers=sysHwMajorVers, dateTimeServerIP=dateTimeServerIP, igmpSnpV3CountPortReportRx=igmpSnpV3CountPortReportRx, voltageDescr=voltageDescr, mvr8021pPriority=mvr8021pPriority, mrstpPortEnable=mrstpPortEnable, dhcpServerStartAddr=dhcpServerStartAddr, defaultMgmt=defaultMgmt, multicastPortFastLeaveTimeout=multicastPortFastLeaveTimeout, mstpPortTable=mstpPortTable, l2ptMacAddr=l2ptMacAddr, routerVrrpStatusIpMaskBits=routerVrrpStatusIpMaskBits, radiusAuthServerTable=radiusAuthServerTable, arpInspectFilterExpiry=arpInspectFilterExpiry, macAuthenticationState=macAuthenticationState, smartIsolationState=smartIsolationState, sysMemoryPoolTable=sysMemoryPoolTable, ctlProtTransState=ctlProtTransState, voltageMaxValue=voltageMaxValue, subnetBasedVlanVid=subnetBasedVlanVid, pppoeIaPortEntryPort=pppoeIaPortEntryPort, voltageNominalValue=voltageNominalValue, sysLogTypeState=sysLogTypeState, errdisableTrapInfoObject=errdisableTrapInfoObject, sFlowPortCollectorRowStatus=sFlowPortCollectorRowStatus, mstpXstPortDesignatedPort=mstpXstPortDesignatedPort, snmpTrapCommunity=snmpTrapCommunity, igmpSnpGroupCountVlanEntry=igmpSnpGroupCountVlanEntry, dhcpSnpPortTable=dhcpSnpPortTable, protoBasedVlanEtherType=protoBasedVlanEtherType, dateTimeNewDateDay=dateTimeNewDateDay, sysMemoryPool=sysMemoryPool, multicastPortLeaveMode=multicastPortLeaveMode, mrstpProtocolSpecification=mrstpProtocolSpecification, outOfBandGateway=outOfBandGateway, radiusAcctServerSharedSecret=radiusAcctServerSharedSecret, ipsg=ipsg, sFlowPortCollectorEntry=sFlowPortCollectorEntry, snmpUserEntry=snmpUserEntry, maxNumOfInbandIp=maxNumOfInbandIp, securedClientService=securedClientService, fanRpmLowThresh=fanRpmLowThresh, snmpTrapDestRowStatus=snmpTrapDestRowStatus, igmpSnpGroupCountPortEntry=igmpSnpGroupCountPortEntry, snmpUserName=snmpUserName, mstpXstPortState=mstpXstPortState, igmpSnpV2CountVlanLeaveRx=igmpSnpV2CountVlanLeaveRx, arpInspectStatus=arpInspectStatus, sysSwMonth=sysSwMonth, portAuthEntry=portAuthEntry, aggrPortGroup=aggrPortGroup, mirrorDirection=mirrorDirection, clusterManagerName=clusterManagerName)
mibBuilder.exportSymbols("ZYXEL-XGS4728F-MIB", loopGuardPortState=loopGuardPortState, mstpGen=mstpGen, authenticationSetup=authenticationSetup, accountingTypeTable=accountingTypeTable, portSecurityPortEntry=portSecurityPortEntry, arpIndex=arpIndex, errdisableTrapPort=errdisableTrapPort, igmpSnpGroupCountPortTable=igmpSnpGroupCountPortTable, vlanStackPortVid=vlanStackPortVid, dateTimeSetup=dateTimeSetup, mvrGroupStartAddress=mvrGroupStartAddress, routerVrrpEntry=routerVrrpEntry, portQueuingMethodQueue=portQueuingMethodQueue, filterSetup=filterSetup, diffservPortTable=diffservPortTable, dhcpSnpDbUrlRenew=dhcpSnpDbUrlRenew, diffservPortEntry=diffservPortEntry, arpInspectStatisticsTable=arpInspectStatisticsTable, errdisableRecoveryReasonTable=errdisableRecoveryReasonTable, dhcpSnpPortEntryTrust=dhcpSnpPortEntryTrust, dhcpVlanOverrideState=dhcpVlanOverrideState, brLimitSetup=brLimitSetup, macAuthenticationPassword=macAuthenticationPassword, trTCMPortState=trTCMPortState, ospfRedistributeRouteProtocol=ospfRedistributeRouteProtocol, errdisableDetectTrap=errdisableDetectTrap, dnsIpAddress=dnsIpAddress, multicastStatusPort=multicastStatusPort, mstpNewRoot=mstpNewRoot, portOpModePortCounterReset=portOpModePortCounterReset, privateVLANPromiscuousPorts=privateVLANPromiscuousPorts, pppoeIaPortVlanEntryCircuitIDString=pppoeIaPortVlanEntryCircuitIDString, igmpSnpGroupCountNum=igmpSnpGroupCountNum, sysMgmtCPUUsage=sysMgmtCPUUsage, clusterManager=clusterManager, mrstpBridgeTable=mrstpBridgeTable, multicastPortThrottlingAction=multicastPortThrottlingAction, pppoeIaFlexibleCircuitIDSyntaxIdentifierString=pppoeIaFlexibleCircuitIDSyntaxIdentifierString, routerVrrpPreempt=routerVrrpPreempt, accessCtlService=accessCtlService, securedClientEntry=securedClientEntry, arpInspectStatisticsReply=arpInspectStatisticsReply, igmpSnpV2CountReportRxDrop=igmpSnpV2CountReportRxDrop, routerDomainIpAddress=routerDomainIpAddress, routerDomainTable=routerDomainTable, ipStatusTable=ipStatusTable, stpState=stpState, sysLogTypeEntry=sysLogTypeEntry, tacacsAuthServerEntry=tacacsAuthServerEntry, transceiverSerialInfoEntrySerialNo=transceiverSerialInfoEntrySerialNo, igmpSnpV2CountQueryTx=igmpSnpV2CountQueryTx, routerVrrpSecondaryVirtualIP=routerVrrpSecondaryVirtualIP, mrstpTimeSinceTopologyChange=mrstpTimeSinceTopologyChange, portOpModePortSpeedDuplex=portOpModePortSpeedDuplex, vlanStackPortPrio=vlanStackPortPrio, dhcpSnpVlanEntryOption82Enable=dhcpSnpVlanEntryOption82Enable, inbandIpTable=inbandIpTable, vlanMappingRuleTransVid=vlanMappingRuleTransVid, clusterMemberEntry=clusterMemberEntry, mrstpBridgeForwardDelay=mrstpBridgeForwardDelay, transceiverDdmInfoEntryPort=transceiverDdmInfoEntryPort, sysMgmtConfigSave=sysMgmtConfigSave, ospfExt=ospfExt, errdisableRecoveryReasonActive=errdisableRecoveryReasonActive, routerVrrpPriority=routerVrrpPriority, rateLimitPortEntry=rateLimitPortEntry, l2ptEntry=l2ptEntry, detect=detect, igmpSnpV2CountLeaveRxDrop=igmpSnpV2CountLeaveRxDrop, igmpsnpQuerierMode=igmpsnpQuerierMode, routingStatusType=routingStatusType, aggrSetup=aggrSetup, tempIndex=tempIndex, transceiverSerialInfoEntryStatus=transceiverSerialInfoEntryStatus, EventIdNumber=EventIdNumber, diffservMapEntry=diffservMapEntry, subnetBasedVlanSetup=subnetBasedVlanSetup, eventEntry=eventEntry, portOpModePortName=portOpModePortName, mstpPortEntry=mstpPortEntry, pppoeIaFlexibleCircuitIDSyntaxDelimiter=pppoeIaFlexibleCircuitIDSyntaxDelimiter, staticRouteMask=staticRouteMask, routerDomainIpTable=routerDomainIpTable, ipsgEntryLease=ipsgEntryLease, clusterStatusMemberStatus=clusterStatusMemberStatus, errdisableRecoveryReasonInterval=errdisableRecoveryReasonInterval, dhcpSnpBindEntryPort=dhcpSnpBindEntryPort, mrstpPortDesignatedCost=mrstpPortDesignatedCost, dhcpSnpDbStatSuccTrans=dhcpSnpDbStatSuccTrans, accessSwitch=accessSwitch, sysMgmtTftpRemoteFileName=sysMgmtTftpRemoteFileName, vlanTrunkPortEntry=vlanTrunkPortEntry, accountingUpdatePeriod=accountingUpdatePeriod, vlanTrunkSetup=vlanTrunkSetup, igmpSnpGroupCountVlanIndex=igmpSnpGroupCountVlanIndex, dhcpSnpDbUrl=dhcpSnpDbUrl, clusterCandidateMac=clusterCandidateMac, ospfAreaExtEntry=ospfAreaExtEntry, clusterCandidateEntry=clusterCandidateEntry, dhcpServerRowStatus=dhcpServerRowStatus, fanRpmTable=fanRpmTable, errdisableRecoveryIfStatusTimeToRecover=errdisableRecoveryIfStatusTimeToRecover, accountingTypeMode=accountingTypeMode, diffservMapTable=diffservMapTable, mstpXstPortDesignatedBridge=mstpXstPortDesignatedBridge, EventServiceAffective=EventServiceAffective, ospfVirtualLinkName=ospfVirtualLinkName, vlanCounterHCPkts256to511Octets=vlanCounterHCPkts256to511Octets, mstpPortIndex=mstpPortIndex, arpLearningPortEntry=arpLearningPortEntry, daylightSavingTimeEndDateMonth=daylightSavingTimeEndDateMonth, snmpTrapGroupEntry=snmpTrapGroupEntry, dhcpSnpBindEntryType=dhcpSnpBindEntryType, igmpSnpGroupCountVlanTable=igmpSnpGroupCountVlanTable, vlanCounterHCPkts65to127Octets=vlanCounterHCPkts65to127Octets, multicastVlanStatusType=multicastVlanStatusType, portSecurityPortTable=portSecurityPortTable, vlanTypeSetup=vlanTypeSetup, subnetBasedVlanEntry=subnetBasedVlanEntry, routingStatusTable=routingStatusTable, tacacsAcctServerTimeout=tacacsAcctServerTimeout, zyxel=zyxel, clusterMaxNumOfManager=clusterMaxNumOfManager)
